{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.34.44.8038",
      "templateHash": "9466950161698103056"
    }
  },
  "parameters": {
    "solutionPrefix": {
      "type": "string",
      "minLength": 3,
      "maxLength": 6,
      "metadata": {
        "description": "Prefix Name"
      }
    },
    "cosmosLocation": {
      "type": "string",
      "metadata": {
        "description": "CosmosDB Location"
      }
    },
    "deploymentType": {
      "type": "string",
      "defaultValue": "GlobalStandard",
      "allowedValues": [
        "Standard",
        "GlobalStandard"
      ],
      "minLength": 1,
      "metadata": {
        "description": "GPT model deployment type:"
      }
    },
    "gptModelName": {
      "type": "string",
      "defaultValue": "gpt-4o-mini",
      "allowedValues": [
        "gpt-4o-mini",
        "gpt-4o",
        "gpt-4"
      ],
      "minLength": 1,
      "metadata": {
        "description": "Name of the GPT model to deploy:"
      }
    },
    "azureOpenaiAPIVersion": {
      "type": "string",
      "defaultValue": "2025-01-01-preview"
    },
    "gptDeploymentCapacity": {
      "type": "int",
      "defaultValue": 30,
      "minValue": 10,
      "metadata": {
        "description": "Capacity of the GPT deployment:"
      }
    },
    "embeddingModel": {
      "type": "string",
      "defaultValue": "text-embedding-ada-002",
      "allowedValues": [
        "text-embedding-ada-002"
      ],
      "minLength": 1,
      "metadata": {
        "description": "Name of the Text Embedding model to deploy:"
      }
    },
    "embeddingDeploymentCapacity": {
      "type": "int",
      "defaultValue": 80,
      "minValue": 10,
      "metadata": {
        "description": "Capacity of the Embedding Model deployment"
      }
    }
  },
  "variables": {
    "ApplicationInsightsName": "[format('appi-{0}', parameters('solutionPrefix'))]",
    "WorkspaceName": "[format('log-{0}', parameters('solutionPrefix'))]",
    "resourceGroupLocation": "[resourceGroup().location]",
    "solutionLocation": "[variables('resourceGroupLocation')]",
    "baseUrl": "https://raw.githubusercontent.com/microsoft/Build-your-own-copilot-Solution-Accelerator/main/",
    "appversion": "latest",
    "functionAppSqlPrompt": "Generate a valid T-SQL query to find {query} for tables and columns provided below:\r\n   1. Table: Clients\r\n   Columns: ClientId, Client, Email, Occupation, MaritalStatus, Dependents\r\n   2. Table: InvestmentGoals\r\n   Columns: ClientId, InvestmentGoal\r\n   3. Table: Assets\r\n   Columns: ClientId, AssetDate, Investment, ROI, Revenue, AssetType\r\n   4. Table: ClientSummaries\r\n   Columns: ClientId, ClientSummary\r\n   5. Table: InvestmentGoalsDetails\r\n   Columns: ClientId, InvestmentGoal, TargetAmount, Contribution\r\n   6. Table: Retirement\r\n   Columns: ClientId, StatusDate, RetirementGoalProgress, EducationGoalProgress\r\n   7. Table: ClientMeetings\r\n   Columns: ClientId, ConversationId, Title, StartTime, EndTime, Advisor, ClientEmail\r\n   Always use the Investment column from the Assets table as the value.\r\n   Assets table has snapshots of values by date. Do not add numbers across different dates for total values.\r\n   Do not use client name in filters.\r\n   Do not include assets values unless asked for.\r\n   ALWAYS use ClientId = {clientid} in the query filter.\r\n   ALWAYS select Client Name (Column: Client) in the query.\r\n   Query filters are IMPORTANT. Add filters like AssetType, AssetDate, etc. if needed.\r\n   Only return the generated SQL query. Do not return anything else.",
    "functionAppCallTranscriptSystemPrompt": "You are an assistant who supports wealth advisors in preparing for client meetings. \r\n  You have access to the clientâ€™s past meeting call transcripts. \r\n  When answering questions, especially summary requests, provide a detailed and structured response that includes key topics, concerns, decisions, and trends. \r\n  If no data is available, state 'No relevant data found for previous meetings.",
    "functionAppStreamTextSystemPrompt": "You are a helpful assistant to a Wealth Advisor. \r\n  The currently selected client's name is '{SelectedClientName}'. Treat any case-insensitive or partial mention as referring to this client. \r\n  If the user mentions no name, assume they are asking about '{SelectedClientName}'. \r\n  If the user references a name that clearly differs from '{SelectedClientName}', respond only with: 'Please only ask questions about the selected client or select another client.' Otherwise, provide thorough answers for every question using only data from SQL or call transcripts. \r\n  If no data is found, respond with 'No data found for that client.' Remove any client identifiers from the final response."
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2020-08-01",
      "name": "[variables('WorkspaceName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": 30
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('ApplicationInsightsName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "[format('hidden-link:{0}', resourceId('Microsoft.Web/sites', variables('ApplicationInsightsName')))]": "Resource"
      },
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('WorkspaceName'))]"
      },
      "kind": "web",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('WorkspaceName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_managed_identity",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionName": {
            "value": "[parameters('solutionPrefix')]"
          },
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "4201070185547993881"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string",
              "minLength": 3,
              "maxLength": 15,
              "metadata": {
                "description": "Solution Name"
              }
            },
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Solution Location"
              }
            },
            "miName": {
              "type": "string",
              "defaultValue": "[format('{0}-managed-identity', parameters('solutionName'))]",
              "metadata": {
                "description": "Name"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[parameters('miName')]",
              "location": "[parameters('solutionLocation')]",
              "tags": {
                "app": "[parameters('solutionName')]",
                "location": "[parameters('solutionLocation')]"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceGroup().id, resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName')), resourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName')), '2023-01-31').principalId]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName'))]"
              ]
            },
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[format('{0}-fn-mi', parameters('solutionName'))]",
              "location": "[parameters('solutionLocation')]",
              "tags": {
                "app": "[parameters('solutionName')]",
                "location": "[parameters('solutionLocation')]"
              }
            },
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[format('{0}-webapp-mi', parameters('solutionName'))]",
              "location": "[parameters('solutionLocation')]",
              "tags": {
                "app": "[parameters('solutionName')]",
                "location": "[parameters('solutionLocation')]"
              }
            }
          ],
          "outputs": {
            "managedIdentityOutput": {
              "type": "object",
              "value": {
                "id": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName'))]",
                "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName')), '2023-01-31').principalId]",
                "clientId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName')), '2023-01-31').clientId]",
                "name": "[parameters('miName')]"
              }
            },
            "managedIdentityFnAppOutput": {
              "type": "object",
              "value": {
                "id": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-fn-mi', parameters('solutionName')))]",
                "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-fn-mi', parameters('solutionName'))), '2023-01-31').principalId]",
                "clientId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-fn-mi', parameters('solutionName'))), '2023-01-31').clientId]",
                "name": "[format('{0}-fn-mi', parameters('solutionName'))]"
              }
            },
            "managedIdentityWebAppOutput": {
              "type": "object",
              "value": {
                "id": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-webapp-mi', parameters('solutionName')))]",
                "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-webapp-mi', parameters('solutionName'))), '2023-01-31').principalId]",
                "clientId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-webapp-mi', parameters('solutionName'))), '2023-01-31').clientId]",
                "name": "[format('{0}-webapp-mi', parameters('solutionName'))]"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_keyvault",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionName": {
            "value": "[parameters('solutionPrefix')]"
          },
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          },
          "managedIdentityObjectId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.objectId]"
          },
          "adlsAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_storage_account'), '2022-09-01').outputs.storageAccountOutput.value.storageAccountName]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "6222524942316554709"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string",
              "minLength": 3,
              "maxLength": 15,
              "metadata": {
                "description": "Solution Name"
              }
            },
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Solution Location"
              }
            },
            "utc": {
              "type": "string",
              "defaultValue": "[utcNow()]"
            },
            "kvName": {
              "type": "string",
              "defaultValue": "[format('{0}-kv-{1}', parameters('solutionName'), uniqueString(parameters('utc')))]",
              "metadata": {
                "description": "Name"
              }
            },
            "createMode": {
              "type": "string",
              "defaultValue": "default",
              "metadata": {
                "description": "Create Mode"
              }
            },
            "enableForDeployment": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enabled For Deployment. Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault."
              }
            },
            "enableForDiskEncryption": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enabled For Disk Encryption. Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
              }
            },
            "enableForTemplateDeployment": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enabled For Template Deployment. Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
              }
            },
            "enableRBACAuthorization": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable RBAC Authorization. Property that controls how data actions are authorized."
              }
            },
            "softDeleteRetentionInDays": {
              "type": "int",
              "defaultValue": 7,
              "metadata": {
                "description": "Soft Delete Retention in Days. softDelete data retention days. It accepts >=7 and <=90."
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "enabled",
              "allowedValues": [
                "enabled",
                "disabled"
              ],
              "metadata": {
                "description": "Public Network Access, Property to specify whether the vault will accept traffic from public internet."
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "standard",
              "allowedValues": [
                "standard",
                "premium"
              ],
              "metadata": {
                "description": "SKU"
              }
            },
            "managedIdentityObjectId": {
              "type": "string"
            },
            "adlsAccountName": {
              "type": "string"
            }
          },
          "variables": {
            "vaultUri": "[format('https://{0}.vault.azure.net/', parameters('kvName'))]"
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2022-07-01",
              "name": "[parameters('kvName')]",
              "location": "[parameters('solutionLocation')]",
              "tags": {
                "app": "[parameters('solutionName')]",
                "location": "[parameters('solutionLocation')]"
              },
              "properties": {
                "accessPolicies": [
                  {
                    "objectId": "[parameters('managedIdentityObjectId')]",
                    "permissions": {
                      "certificates": [
                        "all"
                      ],
                      "keys": [
                        "all"
                      ],
                      "secrets": [
                        "all"
                      ],
                      "storage": [
                        "all"
                      ]
                    },
                    "tenantId": "[subscription().tenantId]"
                  }
                ],
                "createMode": "[parameters('createMode')]",
                "enabledForDeployment": "[parameters('enableForDeployment')]",
                "enabledForDiskEncryption": "[parameters('enableForDiskEncryption')]",
                "enabledForTemplateDeployment": "[parameters('enableForTemplateDeployment')]",
                "enableRbacAuthorization": "[parameters('enableRBACAuthorization')]",
                "softDeleteRetentionInDays": "[parameters('softDeleteRetentionInDays')]",
                "provisioningState": "RegisteringDns",
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                "sku": {
                  "family": "A",
                  "name": "[parameters('sku')]"
                },
                "tenantId": "[subscription().tenantId]",
                "vaultUri": "[variables('vaultUri')]"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceGroup().id, parameters('managedIdentityObjectId'), resourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483'))]",
              "properties": {
                "principalId": "[parameters('managedIdentityObjectId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('kvName'), 'ADLS-ACCOUNT-NAME')]",
              "properties": {
                "value": "[parameters('adlsAccountName')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('kvName'))]"
              ]
            }
          ],
          "outputs": {
            "keyvaultName": {
              "type": "string",
              "value": "[parameters('kvName')]"
            },
            "keyvaultId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('kvName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_storage_account')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_ai_foundry",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionName": {
            "value": "[parameters('solutionPrefix')]"
          },
          "solutionLocation": {
            "value": "[variables('resourceGroupLocation')]"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault'), '2022-09-01').outputs.keyvaultName.value]"
          },
          "deploymentType": {
            "value": "[parameters('deploymentType')]"
          },
          "gptModelName": {
            "value": "[parameters('gptModelName')]"
          },
          "azureOpenaiAPIVersion": {
            "value": "[parameters('azureOpenaiAPIVersion')]"
          },
          "gptDeploymentCapacity": {
            "value": "[parameters('gptDeploymentCapacity')]"
          },
          "embeddingModel": {
            "value": "[parameters('embeddingModel')]"
          },
          "embeddingDeploymentCapacity": {
            "value": "[parameters('embeddingDeploymentCapacity')]"
          },
          "managedIdentityObjectId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.objectId]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "17996005771372242301"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string"
            },
            "solutionLocation": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            },
            "deploymentType": {
              "type": "string"
            },
            "gptModelName": {
              "type": "string"
            },
            "azureOpenaiAPIVersion": {
              "type": "string"
            },
            "gptDeploymentCapacity": {
              "type": "int"
            },
            "embeddingModel": {
              "type": "string"
            },
            "embeddingDeploymentCapacity": {
              "type": "int"
            },
            "managedIdentityObjectId": {
              "type": "string"
            }
          },
          "variables": {
            "storageName": "[format('st{0}hub', parameters('solutionName'))]",
            "storageSkuName": "Standard_LRS",
            "aiServicesName": "[format('ais-{0}', parameters('solutionName'))]",
            "applicationInsightsName": "[format('appi-{0}', parameters('solutionName'))]",
            "containerRegistryName": "[format('cr-{0}', parameters('solutionName'))]",
            "keyvaultName": "[parameters('keyVaultName')]",
            "location": "[parameters('solutionLocation')]",
            "aiHubName": "[format('hub-{0}', parameters('solutionName'))]",
            "aiHubFriendlyName": "[variables('aiHubName')]",
            "aiHubDescription": "AI Hub",
            "aiProjectName": "[format('proj-{0}', parameters('solutionName'))]",
            "aiProjectFriendlyName": "[variables('aiProjectName')]",
            "aiSearchName": "[format('srch-{0}', parameters('solutionName'))]",
            "workspaceName": "[format('log-{0}-hub', parameters('solutionName'))]",
            "aiModelDeployments": [
              {
                "name": "[parameters('gptModelName')]",
                "model": "[parameters('gptModelName')]",
                "sku": {
                  "name": "[parameters('deploymentType')]",
                  "capacity": "[parameters('gptDeploymentCapacity')]"
                },
                "raiPolicyName": "Microsoft.Default"
              },
              {
                "name": "[parameters('embeddingModel')]",
                "model": "[parameters('embeddingModel')]",
                "sku": {
                  "name": "Standard",
                  "capacity": "[parameters('embeddingDeploymentCapacity')]"
                },
                "raiPolicyName": "Microsoft.Default"
              }
            ],
            "containerRegistryNameCleaned": "[replace(variables('containerRegistryName'), '-', '')]",
            "storageNameCleaned": "[replace(variables('storageName'), '-', '')]"
          },
          "resources": [
            {
              "type": "Microsoft.MachineLearningServices/workspaces/connections",
              "apiVersion": "2024-07-01-preview",
              "name": "[format('{0}/{1}', variables('aiHubName'), format('{0}-connection-AzureOpenAI', variables('aiHubName')))]",
              "properties": {
                "category": "AIServices",
                "target": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName')), '2021-10-01').endpoint]",
                "authType": "ApiKey",
                "isSharedToAll": true,
                "credentials": {
                  "key": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName')), '2021-10-01').key1]"
                },
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', variables('aiHubName'))]",
                "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]",
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName'))]",
                "aiServicesDeployments"
              ]
            },
            {
              "type": "Microsoft.MachineLearningServices/workspaces/connections",
              "apiVersion": "2024-07-01-preview",
              "name": "[format('{0}/{1}', variables('aiHubName'), format('{0}-connection-AzureAISearch', variables('aiHubName')))]",
              "properties": {
                "category": "CognitiveSearch",
                "target": "[format('https://{0}.search.windows.net', variables('aiSearchName'))]",
                "authType": "ApiKey",
                "isSharedToAll": true,
                "credentials": {
                  "key": "[listAdminKeys(resourceId('Microsoft.Search/searchServices', variables('aiSearchName')), '2023-11-01').primaryKey]"
                },
                "metadata": {
                  "type": "azure_ai_search",
                  "ApiType": "Azure",
                  "ResourceId": "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]",
                  "ApiVersion": "2024-05-01-preview",
                  "DeploymentApiVersion": "2023-11-01"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', variables('aiHubName'))]",
                "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
              ]
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2023-09-01",
              "name": "[variables('workspaceName')]",
              "location": "[variables('location')]",
              "tags": {},
              "properties": {
                "retentionInDays": 30,
                "sku": {
                  "name": "PerGB2018"
                }
              }
            },
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[variables('applicationInsightsName')]",
              "location": "[variables('location')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "publicNetworkAccessForIngestion": "Enabled",
                "publicNetworkAccessForQuery": "Enabled",
                "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]"
              ]
            },
            {
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2021-09-01",
              "name": "[variables('containerRegistryNameCleaned')]",
              "location": "[variables('location')]",
              "sku": {
                "name": "Premium"
              },
              "properties": {
                "adminUserEnabled": true,
                "dataEndpointEnabled": false,
                "networkRuleBypassOptions": "AzureServices",
                "networkRuleSet": {
                  "defaultAction": "Deny"
                },
                "policies": {
                  "quarantinePolicy": {
                    "status": "enabled"
                  },
                  "retentionPolicy": {
                    "status": "enabled",
                    "days": 7
                  },
                  "trustPolicy": {
                    "status": "disabled",
                    "type": "Notary"
                  }
                },
                "publicNetworkAccess": "Disabled",
                "zoneRedundancy": "Disabled"
              }
            },
            {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2021-10-01",
              "name": "[variables('aiServicesName')]",
              "location": "[variables('location')]",
              "sku": {
                "name": "S0"
              },
              "kind": "AIServices",
              "properties": {
                "customSubDomainName": "[variables('aiServicesName')]",
                "apiProperties": {
                  "statisticsEnabled": false
                }
              }
            },
            {
              "copy": {
                "name": "aiServicesDeployments",
                "count": "[length(variables('aiModelDeployments'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', variables('aiServicesName'), variables('aiModelDeployments')[copyIndex()].name)]",
              "properties": {
                "model": {
                  "format": "OpenAI",
                  "name": "[variables('aiModelDeployments')[copyIndex()].model]"
                },
                "raiPolicyName": "[variables('aiModelDeployments')[copyIndex()].raiPolicyName]"
              },
              "sku": {
                "name": "[variables('aiModelDeployments')[copyIndex()].sku.name]",
                "capacity": "[variables('aiModelDeployments')[copyIndex()].sku.capacity]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName'))]"
              ]
            },
            {
              "type": "Microsoft.Search/searchServices",
              "apiVersion": "2023-11-01",
              "name": "[variables('aiSearchName')]",
              "location": "[parameters('solutionLocation')]",
              "sku": {
                "name": "basic"
              },
              "properties": {
                "replicaCount": 1,
                "partitionCount": 1,
                "hostingMode": "default",
                "publicNetworkAccess": "enabled",
                "networkRuleSet": {
                  "ipRules": []
                },
                "encryptionWithCmk": {
                  "enforcement": "Unspecified"
                },
                "disableLocalAuth": false,
                "authOptions": {
                  "apiKeyOnly": {}
                },
                "semanticSearch": "free"
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2022-09-01",
              "name": "[variables('storageNameCleaned')]",
              "location": "[variables('location')]",
              "sku": {
                "name": "[variables('storageSkuName')]"
              },
              "kind": "StorageV2",
              "properties": {
                "accessTier": "Hot",
                "allowBlobPublicAccess": false,
                "allowCrossTenantReplication": false,
                "allowSharedKeyAccess": false,
                "encryption": {
                  "keySource": "Microsoft.Storage",
                  "requireInfrastructureEncryption": false,
                  "services": {
                    "blob": {
                      "enabled": true,
                      "keyType": "Account"
                    },
                    "file": {
                      "enabled": true,
                      "keyType": "Account"
                    },
                    "queue": {
                      "enabled": true,
                      "keyType": "Service"
                    },
                    "table": {
                      "enabled": true,
                      "keyType": "Service"
                    }
                  }
                },
                "isHnsEnabled": false,
                "isNfsV3Enabled": false,
                "keyPolicy": {
                  "keyExpirationPeriodInDays": 7
                },
                "largeFileSharesState": "Disabled",
                "minimumTlsVersion": "TLS1_2",
                "networkAcls": {
                  "bypass": "AzureServices",
                  "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceGroup().id, parameters('managedIdentityObjectId'), resourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe'))]",
              "properties": {
                "principalId": "[parameters('managedIdentityObjectId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "type": "Microsoft.MachineLearningServices/workspaces",
              "apiVersion": "2023-08-01-preview",
              "name": "[variables('aiHubName')]",
              "location": "[variables('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "friendlyName": "[variables('aiHubFriendlyName')]",
                "description": "[variables('aiHubDescription')]",
                "keyVault": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                "storageAccount": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]",
                "applicationInsights": "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]",
                "containerRegistry": "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryNameCleaned'))]"
              },
              "kind": "hub",
              "dependsOn": [
                "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]",
                "aiServicesDeployments",
                "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]",
                "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryNameCleaned'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
              ]
            },
            {
              "type": "Microsoft.MachineLearningServices/workspaces",
              "apiVersion": "2024-01-01-preview",
              "name": "[variables('aiProjectName')]",
              "location": "[variables('location')]",
              "kind": "Project",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "friendlyName": "[variables('aiProjectFriendlyName')]",
                "hubResourceId": "[resourceId('Microsoft.MachineLearningServices/workspaces', variables('aiHubName'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', variables('aiHubName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'TENANT-ID')]",
              "properties": {
                "value": "[subscription().tenantId]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-KEY')]",
              "properties": {
                "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName')), '2021-10-01').key1]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPEN-AI-DEPLOYMENT-MODEL')]",
              "properties": {
                "value": "[parameters('gptModelName')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-PREVIEW-API-VERSION')]",
              "properties": {
                "value": "[parameters('azureOpenaiAPIVersion')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-ENDPOINT')]",
              "properties": {
                "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName')), '2021-10-01').endpoint]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-AI-PROJECT-CONN-STRING')]",
              "properties": {
                "value": "[format('{0};{1};{2};{3}', split(reference(resourceId('Microsoft.MachineLearningServices/workspaces', variables('aiProjectName')), '2024-01-01-preview').discoveryUrl, '/')[2], subscription().subscriptionId, resourceGroup().name, variables('aiProjectName'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', variables('aiProjectName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-SEARCH-KEY')]",
              "properties": {
                "value": "[listAdminKeys(resourceId('Microsoft.Search/searchServices', variables('aiSearchName')), '2023-11-01').primaryKey]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-SEARCH-ENDPOINT')]",
              "properties": {
                "value": "[format('https://{0}.search.windows.net', variables('aiSearchName'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-SEARCH-SERVICE')]",
              "properties": {
                "value": "[variables('aiSearchName')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-SEARCH-INDEX')]",
              "properties": {
                "value": "transcripts_index"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'COG-SERVICES-ENDPOINT')]",
              "properties": {
                "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName')), '2021-10-01').endpoint]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'COG-SERVICES-KEY')]",
              "properties": {
                "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName')), '2021-10-01').key1]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'COG-SERVICES-NAME')]",
              "properties": {
                "value": "[variables('aiServicesName')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-SUBSCRIPTION-ID')]",
              "properties": {
                "value": "[subscription().subscriptionId]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-RESOURCE-GROUP')]",
              "properties": {
                "value": "[resourceGroup().name]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-LOCATION')]",
              "properties": {
                "value": "[parameters('solutionLocation')]"
              }
            }
          ],
          "outputs": {
            "keyvaultName": {
              "type": "string",
              "value": "[variables('keyvaultName')]"
            },
            "keyvaultId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            },
            "aiServicesTarget": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName')), '2021-10-01').endpoint]"
            },
            "aiServicesName": {
              "type": "string",
              "value": "[variables('aiServicesName')]"
            },
            "aiServicesId": {
              "type": "string",
              "value": "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServicesName'))]"
            },
            "aiSearchName": {
              "type": "string",
              "value": "[variables('aiSearchName')]"
            },
            "aiSearchId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
            },
            "aiSearchTarget": {
              "type": "string",
              "value": "[format('https://{0}.search.windows.net', variables('aiSearchName'))]"
            },
            "aiSearchService": {
              "type": "string",
              "value": "[variables('aiSearchName')]"
            },
            "aiProjectName": {
              "type": "string",
              "value": "[variables('aiProjectName')]"
            },
            "applicationInsightsId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]"
            },
            "logAnalyticsWorkspaceResourceName": {
              "type": "string",
              "value": "[variables('workspaceName')]"
            },
            "storageAccountName": {
              "type": "string",
              "value": "[variables('storageNameCleaned')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_cosmos_db",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionName": {
            "value": "[parameters('solutionPrefix')]"
          },
          "solutionLocation": {
            "value": "[parameters('cosmosLocation')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "4003838080878788531"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string",
              "minLength": 3,
              "maxLength": 15,
              "metadata": {
                "description": "Solution Name"
              }
            },
            "solutionLocation": {
              "type": "string"
            },
            "accountName": {
              "type": "string",
              "defaultValue": "[format('{0}-cosmos', parameters('solutionName'))]",
              "metadata": {
                "description": "Name"
              }
            },
            "databaseName": {
              "type": "string",
              "defaultValue": "db_conversation_history"
            },
            "collectionName": {
              "type": "string",
              "defaultValue": "conversations"
            },
            "containers": {
              "type": "array",
              "defaultValue": [
                {
                  "name": "[parameters('collectionName')]",
                  "id": "[parameters('collectionName')]",
                  "partitionKey": "/userId"
                }
              ]
            },
            "kind": {
              "type": "string",
              "defaultValue": "GlobalDocumentDB",
              "allowedValues": [
                "GlobalDocumentDB",
                "MongoDB",
                "Parse"
              ]
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "copy": {
                "name": "database::list",
                "count": "[length(parameters('containers'))]"
              },
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2022-05-15",
              "name": "[format('{0}/{1}/{2}', split(format('{0}/{1}', parameters('accountName'), parameters('databaseName')), '/')[0], split(format('{0}/{1}', parameters('accountName'), parameters('databaseName')), '/')[1], parameters('containers')[copyIndex()].name)]",
              "properties": {
                "resource": {
                  "id": "[parameters('containers')[copyIndex()].id]",
                  "partitionKey": {
                    "paths": [
                      "[parameters('containers')[copyIndex()].partitionKey]"
                    ]
                  }
                },
                "options": {}
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', split(format('{0}/{1}', parameters('accountName'), parameters('databaseName')), '/')[0], split(format('{0}/{1}', parameters('accountName'), parameters('databaseName')), '/')[1])]"
              ]
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2022-08-15",
              "name": "[parameters('accountName')]",
              "kind": "[parameters('kind')]",
              "location": "[parameters('solutionLocation')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "consistencyPolicy": {
                  "defaultConsistencyLevel": "Session"
                },
                "locations": [
                  {
                    "locationName": "[parameters('solutionLocation')]",
                    "failoverPriority": 0,
                    "isZoneRedundant": false
                  }
                ],
                "databaseAccountOfferType": "Standard",
                "enableAutomaticFailover": false,
                "enableMultipleWriteLocations": false,
                "disableLocalAuth": true,
                "apiProperties": "[if(equals(parameters('kind'), 'MongoDB'), createObject('serverVersion', '4.0'), createObject())]",
                "capabilities": [
                  {
                    "name": "EnableServerless"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
              "apiVersion": "2022-05-15",
              "name": "[format('{0}/{1}', parameters('accountName'), parameters('databaseName'))]",
              "properties": {
                "resource": {
                  "id": "[parameters('databaseName')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('accountName'))]"
              ]
            }
          ],
          "outputs": {
            "cosmosOutput": {
              "type": "object",
              "value": {
                "cosmosAccountName": "[parameters('accountName')]",
                "cosmosDatabaseName": "[parameters('databaseName')]",
                "cosmosContainerName": "[parameters('collectionName')]"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_storage_account",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionName": {
            "value": "[parameters('solutionPrefix')]"
          },
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          },
          "managedIdentityObjectId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.objectId]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "11698875401555850644"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string",
              "minLength": 3,
              "maxLength": 15,
              "metadata": {
                "description": "Solution Name"
              }
            },
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Solution Location"
              }
            },
            "saName": {
              "type": "string",
              "defaultValue": "[format('{0}storageaccount', parameters('solutionName'))]",
              "metadata": {
                "description": "Name"
              }
            },
            "managedIdentityObjectId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2022-09-01",
              "name": "[parameters('saName')]",
              "location": "[parameters('solutionLocation')]",
              "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
              },
              "kind": "StorageV2",
              "properties": {
                "minimumTlsVersion": "TLS1_2",
                "allowBlobPublicAccess": false,
                "isHnsEnabled": true,
                "networkAcls": {
                  "bypass": "AzureServices",
                  "virtualNetworkRules": [],
                  "ipRules": [],
                  "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                  "services": {
                    "file": {
                      "keyType": "Account",
                      "enabled": true
                    },
                    "blob": {
                      "keyType": "Account",
                      "enabled": true
                    }
                  },
                  "keySource": "Microsoft.Storage"
                },
                "accessTier": "Hot",
                "allowSharedKeyAccess": false
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/{1}', parameters('saName'), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": []
                },
                "deleteRetentionPolicy": {
                  "allowPermanentDelete": false,
                  "enabled": false
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('saName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/{1}/{2}', parameters('saName'), 'default', 'data')]",
              "properties": {
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "None"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('saName'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('saName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceGroup().id, parameters('managedIdentityObjectId'), resourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe'))]",
              "properties": {
                "principalId": "[parameters('managedIdentityObjectId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                "principalType": "ServicePrincipal"
              }
            }
          ],
          "outputs": {
            "storageAccountOutput": {
              "type": "object",
              "value": {
                "id": "[resourceId('Microsoft.Storage/storageAccounts', parameters('saName'))]",
                "name": "[parameters('saName')]",
                "uri": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('saName')), '2022-09-01').primaryEndpoints.web]",
                "dfs": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('saName')), '2022-09-01').primaryEndpoints.dfs]",
                "storageAccountName": "[parameters('saName')]",
                "key": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('saName')), '2021-04-01').keys[0].value]",
                "connectionString": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', parameters('saName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('saName')), '2022-09-01').keys[0].value, environment().suffixes.storage)]",
                "dataContainer": "data"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_sql_db",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionName": {
            "value": "[parameters('solutionPrefix')]"
          },
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault'), '2022-09-01').outputs.keyvaultName.value]"
          },
          "managedIdentityObjectId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.objectId]"
          },
          "managedIdentityName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.name]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "14804642426325957238"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string",
              "minLength": 3,
              "maxLength": 15,
              "metadata": {
                "description": "Solution Name"
              }
            },
            "solutionLocation": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            },
            "managedIdentityObjectId": {
              "type": "string"
            },
            "managedIdentityName": {
              "type": "string"
            },
            "serverName": {
              "type": "string",
              "defaultValue": "[format('{0}-sql-server', parameters('solutionName'))]",
              "metadata": {
                "description": "The name of the SQL logical server."
              }
            },
            "sqlDBName": {
              "type": "string",
              "defaultValue": "[format('{0}-sql-db', parameters('solutionName'))]",
              "metadata": {
                "description": "The name of the SQL Database."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[parameters('solutionLocation')]",
              "metadata": {
                "description": "Location for all resources."
              }
            },
            "administratorLogin": {
              "type": "string",
              "defaultValue": "sqladmin",
              "metadata": {
                "description": "The administrator username of the SQL logical server."
              }
            },
            "administratorLoginPassword": {
              "type": "securestring",
              "defaultValue": "TestPassword_1234",
              "metadata": {
                "description": "The administrator password of the SQL logical server."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Sql/servers",
              "apiVersion": "2023-08-01-preview",
              "name": "[parameters('serverName')]",
              "location": "[parameters('location')]",
              "kind": "v12.0",
              "properties": {
                "publicNetworkAccess": "Enabled",
                "version": "12.0",
                "restrictOutboundNetworkAccess": "Disabled",
                "administrators": {
                  "login": "[parameters('managedIdentityName')]",
                  "sid": "[parameters('managedIdentityObjectId')]",
                  "tenantId": "[subscription().tenantId]",
                  "administratorType": "ActiveDirectory",
                  "azureADOnlyAuthentication": true
                }
              }
            },
            {
              "type": "Microsoft.Sql/servers/firewallRules",
              "apiVersion": "2023-08-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), 'AllowSpecificRange')]",
              "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "255.255.255.255"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('serverName'))]"
              ]
            },
            {
              "type": "Microsoft.Sql/servers/firewallRules",
              "apiVersion": "2023-08-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), 'AllowAllWindowsAzureIps')]",
              "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "0.0.0.0"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('serverName'))]"
              ]
            },
            {
              "type": "Microsoft.Sql/servers/databases",
              "apiVersion": "2023-08-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), parameters('sqlDBName'))]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "GP_S_Gen5",
                "tier": "GeneralPurpose",
                "family": "Gen5",
                "capacity": 2
              },
              "kind": "v12.0,user,vcore,serverless",
              "properties": {
                "collation": "SQL_Latin1_General_CP1_CI_AS",
                "autoPauseDelay": 60,
                "minCapacity": 1,
                "readScale": "Disabled",
                "zoneRedundant": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('serverName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'SQLDB-SERVER')]",
              "properties": {
                "value": "[format('{0}.database.windows.net', parameters('serverName'))]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'SQLDB-DATABASE')]",
              "properties": {
                "value": "[parameters('sqlDBName')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'SQLDB-USERNAME')]",
              "properties": {
                "value": "[parameters('administratorLogin')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'SQLDB-PASSWORD')]",
              "properties": {
                "value": "[parameters('administratorLoginPassword')]"
              }
            }
          ],
          "outputs": {
            "sqlServerName": {
              "type": "string",
              "value": "[format('{0}.database.windows.net', parameters('serverName'))]"
            },
            "sqlDbName": {
              "type": "string",
              "value": "[parameters('sqlDBName')]"
            },
            "sqlDbUser": {
              "type": "string",
              "value": "[parameters('administratorLogin')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_post_deployment_scripts",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionName": {
            "value": "[parameters('solutionPrefix')]"
          },
          "solutionLocation": {
            "value": "[variables('resourceGroupLocation')]"
          },
          "baseUrl": {
            "value": "[variables('baseUrl')]"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_storage_account'), '2022-09-01').outputs.storageAccountOutput.value.storageAccountName]"
          },
          "containerName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_storage_account'), '2022-09-01').outputs.storageAccountOutput.value.dataContainer]"
          },
          "managedIdentityObjectId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.id]"
          },
          "managedIdentityClientId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.clientId]"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.keyvaultName.value]"
          },
          "logAnalyticsWorkspaceResourceName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.logAnalyticsWorkspaceResourceName.value]"
          },
          "sqlServerName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_sql_db'), '2022-09-01').outputs.sqlServerName.value]"
          },
          "sqlDbName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_sql_db'), '2022-09-01').outputs.sqlDbName.value]"
          },
          "sqlUsers": {
            "value": [
              {
                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityFnAppOutput.value.clientId]",
                "principalName": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityFnAppOutput.value.name]",
                "databaseRoles": [
                  "db_datareader"
                ]
              },
              {
                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityWebAppOutput.value.clientId]",
                "principalName": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityWebAppOutput.value.name]",
                "databaseRoles": [
                  "db_datareader",
                  "db_datawriter"
                ]
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "1035304206493927023"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string",
              "metadata": {
                "description": "Solution Name"
              }
            },
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Specifies the location for resources."
              }
            },
            "baseUrl": {
              "type": "string"
            },
            "managedIdentityObjectId": {
              "type": "string"
            },
            "managedIdentityClientId": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "containerName": {
              "type": "string"
            },
            "containerAppName": {
              "type": "string",
              "defaultValue": "[format('{0}containerapp', parameters('solutionName'))]"
            },
            "environmentName": {
              "type": "string",
              "defaultValue": "[format('{0}containerappenv', parameters('solutionName'))]"
            },
            "imageName": {
              "type": "string",
              "defaultValue": "python:3.11-alpine"
            },
            "setupCopyKbFiles": {
              "type": "string",
              "defaultValue": "[format('{0}infra/scripts/copy_kb_files.sh', parameters('baseUrl'))]"
            },
            "setupCreateIndexScriptsUrl": {
              "type": "string",
              "defaultValue": "[format('{0}infra/scripts/run_create_index_scripts.sh', parameters('baseUrl'))]"
            },
            "createSqlUserAndRoleScriptsUrl": {
              "type": "string",
              "defaultValue": "[format('{0}infra/scripts/add_user_scripts/create-sql-user-and-role.ps1', parameters('baseUrl'))]"
            },
            "keyVaultName": {
              "type": "string"
            },
            "sqlServerName": {
              "type": "string"
            },
            "sqlDbName": {
              "type": "string"
            },
            "sqlUsers": {
              "type": "array",
              "defaultValue": []
            },
            "logAnalyticsWorkspaceResourceName": {
              "type": "string"
            }
          },
          "variables": {
            "resourceGroupName": "[resourceGroup().name]"
          },
          "resources": [
            {
              "type": "Microsoft.App/managedEnvironments",
              "apiVersion": "2022-03-01",
              "name": "[parameters('environmentName')]",
              "location": "[parameters('solutionLocation')]",
              "properties": {
                "zoneRedundant": false,
                "appLogsConfiguration": {
                  "destination": "log-analytics",
                  "logAnalyticsConfiguration": {
                    "customerId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceResourceName')), '2020-10-01').customerId]",
                    "sharedKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceResourceName')), '2020-10-01').primarySharedKey]"
                  }
                }
              }
            },
            {
              "type": "Microsoft.App/containerApps",
              "apiVersion": "2022-03-01",
              "name": "[parameters('containerAppName')]",
              "location": "[parameters('solutionLocation')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('managedIdentityObjectId'))]": {}
                }
              },
              "properties": {
                "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', parameters('environmentName'))]",
                "configuration": {
                  "ingress": null,
                  "activeRevisionsMode": "Single"
                },
                "template": {
                  "scale": {
                    "minReplicas": 1,
                    "maxReplicas": 1
                  },
                  "containers": [
                    {
                      "name": "[parameters('containerAppName')]",
                      "image": "[parameters('imageName')]",
                      "resources": {
                        "cpu": 2,
                        "memory": "4.0Gi"
                      },
                      "command": [
                        "/bin/sh",
                        "-c",
                        "[format('mkdir -p /scripts && apk add --no-cache curl bash jq py3-pip gcc musl-dev libffi-dev openssl-dev python3-dev && pip install --upgrade azure-cli && apk add --no-cache --virtual .build-deps build-base unixodbc-dev && curl -s -o msodbcsql18_18.4.1.1-1_amd64.apk https://download.microsoft.com/download/7/6/d/76de322a-d860-4894-9945-f0cc5d6a45f8/msodbcsql18_18.4.1.1-1_amd64.apk && curl -s -o mssql-tools18_18.4.1.1-1_amd64.apk https://download.microsoft.com/download/7/6/d/76de322a-d860-4894-9945-f0cc5d6a45f8/mssql-tools18_18.4.1.1-1_amd64.apk && apk add --allow-untrusted msodbcsql18_18.4.1.1-1_amd64.apk && apk add --allow-untrusted mssql-tools18_18.4.1.1-1_amd64.apk && curl -s -o /scripts/copy_kb_files.sh {0} && chmod +x /scripts/copy_kb_files.sh && sh -x /scripts/copy_kb_files.sh {1} {2} {3} {4} && curl -s -o /scripts/run_create_index_scripts.sh {5} && chmod +x /scripts/run_create_index_scripts.sh && sh -x /scripts/run_create_index_scripts.sh {6} {7} {8} && apk add --no-cache ca-certificates less ncurses-terminfo-base krb5-libs libgcc libintl libssl3 libstdc++ tzdata userspace-rcu zlib icu-libs curl && apk -X https://dl-cdn.alpinelinux.org/alpine/edge/main add --no-cache lttng-ust openssh-client && curl -L https://github.com/PowerShell/PowerShell/releases/download/v7.5.0/powershell-7.5.0-linux-musl-x64.tar.gz -o /tmp/powershell.tar.gz && mkdir -p /opt/microsoft/powershell/7 && tar zxf /tmp/powershell.tar.gz -C /opt/microsoft/powershell/7 && chmod +x /opt/microsoft/powershell/7/pwsh && ln -s /opt/microsoft/powershell/7/pwsh /usr/bin/pwsh && curl -s -o /scripts/create-sql-user-and-role.ps1 {9} && chmod +x /scripts/create-sql-user-and-role.ps1 && pwsh -File /scripts/create-sql-user-and-role.ps1 -SqlServerName {10} -SqlDatabaseName {11} -ClientId {12} -DisplayName {13} -ManagedIdentityClientId {14} -DatabaseRole {15} && pwsh -File /scripts/create-sql-user-and-role.ps1 -SqlServerName {16} -SqlDatabaseName {17} -ClientId {18} -DisplayName {19} -ManagedIdentityClientId {20} -DatabaseRole {21} && pwsh -File /scripts/create-sql-user-and-role.ps1 -SqlServerName {22} -SqlDatabaseName {23} -ClientId {24} -DisplayName {25} -ManagedIdentityClientId {26} -DatabaseRole {27} && az login --identity --client-id {28} && az containerapp update --name {29} --resource-group {30} --min-replicas 0 --cpu 0.25 --memory 0.5Gi && az containerapp revision deactivate -g {31} --revision $(az containerapp revision list -n {32} -g {33} --query \"[0].name\" -o tsv) && echo \"Container app setup completed successfully.\"', parameters('setupCopyKbFiles'), parameters('storageAccountName'), parameters('containerName'), parameters('baseUrl'), parameters('managedIdentityClientId'), parameters('setupCreateIndexScriptsUrl'), parameters('baseUrl'), parameters('keyVaultName'), parameters('managedIdentityClientId'), parameters('createSqlUserAndRoleScriptsUrl'), parameters('sqlServerName'), parameters('sqlDbName'), parameters('sqlUsers')[0].principalId, parameters('sqlUsers')[0].principalName, parameters('managedIdentityClientId'), parameters('sqlUsers')[0].databaseRoles[0], parameters('sqlServerName'), parameters('sqlDbName'), parameters('sqlUsers')[1].principalId, parameters('sqlUsers')[1].principalName, parameters('managedIdentityClientId'), parameters('sqlUsers')[1].databaseRoles[0], parameters('sqlServerName'), parameters('sqlDbName'), parameters('sqlUsers')[1].principalId, parameters('sqlUsers')[1].principalName, parameters('managedIdentityClientId'), parameters('sqlUsers')[1].databaseRoles[1], parameters('managedIdentityClientId'), parameters('containerAppName'), variables('resourceGroupName'), variables('resourceGroupName'), parameters('containerAppName'), variables('resourceGroupName'))]"
                      ],
                      "env": [
                        {
                          "name": "STORAGE_ACCOUNT_NAME",
                          "value": "[parameters('storageAccountName')]"
                        },
                        {
                          "name": "CONTAINER_NAME",
                          "value": "[parameters('containerName')]"
                        },
                        {
                          "name": "APPSETTING_WEBSITE_SITE_NAME",
                          "value": "DUMMY"
                        }
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.App/managedEnvironments', parameters('environmentName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_sql_db')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_storage_account')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_azure_function",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionName": {
            "value": "[parameters('solutionPrefix')]"
          },
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          },
          "azureOpenAIApiKey": {
            "reference": {
              "keyVault": {
                "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.KeyVault/vaults', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.keyvaultName.value)]"
              },
              "secretName": "AZURE-OPENAI-KEY"
            }
          },
          "azureOpenAIApiVersion": {
            "value": "[parameters('azureOpenaiAPIVersion')]"
          },
          "azureOpenAIEndpoint": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiServicesTarget.value]"
          },
          "azureSearchAdminKey": {
            "reference": {
              "keyVault": {
                "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.KeyVault/vaults', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.keyvaultName.value)]"
              },
              "secretName": "AZURE-SEARCH-KEY"
            }
          },
          "azureSearchServiceEndpoint": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiSearchTarget.value]"
          },
          "azureSearchIndex": {
            "value": "transcripts_index"
          },
          "sqlServerName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_sql_db'), '2022-09-01').outputs.sqlServerName.value]"
          },
          "sqlDbName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_sql_db'), '2022-09-01').outputs.sqlDbName.value]"
          },
          "sqlDbUser": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_sql_db'), '2022-09-01').outputs.sqlDbUser.value]"
          },
          "sqlDbPwd": {
            "reference": {
              "keyVault": {
                "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.KeyVault/vaults', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.keyvaultName.value)]"
              },
              "secretName": "SQLDB-PASSWORD"
            }
          },
          "functionAppVersion": {
            "value": "[variables('appversion')]"
          },
          "sqlSystemPrompt": {
            "value": "[variables('functionAppSqlPrompt')]"
          },
          "callTranscriptSystemPrompt": {
            "value": "[variables('functionAppCallTranscriptSystemPrompt')]"
          },
          "streamTextSystemPrompt": {
            "value": "[variables('functionAppStreamTextSystemPrompt')]"
          },
          "userassignedIdentityClientId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityFnAppOutput.value.clientId]"
          },
          "userassignedIdentityId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityFnAppOutput.value.id]"
          },
          "applicationInsightsId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.applicationInsightsId.value]"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.storageAccountName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "10145274868556510486"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the location for resources."
              }
            },
            "solutionLocation": {
              "type": "string"
            },
            "azureOpenAIApiKey": {
              "type": "securestring"
            },
            "azureOpenAIApiVersion": {
              "type": "string"
            },
            "azureOpenAIEndpoint": {
              "type": "string"
            },
            "azureSearchAdminKey": {
              "type": "securestring"
            },
            "azureSearchServiceEndpoint": {
              "type": "string"
            },
            "azureSearchIndex": {
              "type": "string"
            },
            "sqlServerName": {
              "type": "string"
            },
            "sqlDbName": {
              "type": "string"
            },
            "sqlDbUser": {
              "type": "string"
            },
            "sqlDbPwd": {
              "type": "securestring"
            },
            "functionAppVersion": {
              "type": "string"
            },
            "sqlSystemPrompt": {
              "type": "string",
              "metadata": {
                "description": "Azure Function App SQL System Prompt"
              }
            },
            "callTranscriptSystemPrompt": {
              "type": "string",
              "metadata": {
                "description": "Azure Function App CallTranscript System Prompt"
              }
            },
            "streamTextSystemPrompt": {
              "type": "string",
              "metadata": {
                "description": "Azure Function App Stream Text System Prompt"
              }
            },
            "userassignedIdentityId": {
              "type": "string"
            },
            "userassignedIdentityClientId": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "applicationInsightsId": {
              "type": "string"
            }
          },
          "variables": {
            "functionAppName": "[format('{0}fn', parameters('solutionName'))]",
            "azureOpenAIDeploymentModel": "gpt-4o-mini",
            "azureOpenAIEmbeddingDeployment": "text-embedding-ada-002",
            "valueOne": "1"
          },
          "resources": [
            {
              "type": "Microsoft.App/managedEnvironments",
              "apiVersion": "2022-06-01-preview",
              "name": "[format('{0}env', parameters('solutionName'))]",
              "location": "[parameters('solutionLocation')]",
              "sku": {
                "name": "Consumption"
              },
              "properties": {}
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2024-04-01",
              "name": "[variables('functionAppName')]",
              "location": "[parameters('solutionLocation')]",
              "kind": "functionapp",
              "identity": {
                "type": "SystemAssigned, UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('userassignedIdentityId'))]": {}
                }
              },
              "properties": {
                "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', format('{0}env', parameters('solutionName')))]",
                "siteConfig": {
                  "linuxFxVersion": "[format('DOCKER|bycwacontainerreg.azurecr.io/byc-wa-fn:{0}', parameters('functionAppVersion'))]",
                  "appSettings": [
                    {
                      "name": "AzureWebJobsStorage__accountname",
                      "value": "[parameters('storageAccountName')]"
                    },
                    {
                      "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                      "value": "[reference(parameters('applicationInsightsId'), '2015-05-01').InstrumentationKey]"
                    },
                    {
                      "name": "AZURE_OPEN_AI_API_KEY",
                      "value": "[parameters('azureOpenAIApiKey')]"
                    },
                    {
                      "name": "AZURE_OPEN_AI_DEPLOYMENT_MODEL",
                      "value": "[variables('azureOpenAIDeploymentModel')]"
                    },
                    {
                      "name": "AZURE_OPEN_AI_ENDPOINT",
                      "value": "[parameters('azureOpenAIEndpoint')]"
                    },
                    {
                      "name": "AZURE_OPENAI_EMBEDDING_DEPLOYMENT",
                      "value": "[variables('azureOpenAIEmbeddingDeployment')]"
                    },
                    {
                      "name": "OPENAI_API_VERSION",
                      "value": "[parameters('azureOpenAIApiVersion')]"
                    },
                    {
                      "name": "AZURE_AI_SEARCH_API_KEY",
                      "value": "[parameters('azureSearchAdminKey')]"
                    },
                    {
                      "name": "AZURE_AI_SEARCH_ENDPOINT",
                      "value": "[parameters('azureSearchServiceEndpoint')]"
                    },
                    {
                      "name": "AZURE_SEARCH_INDEX",
                      "value": "[parameters('azureSearchIndex')]"
                    },
                    {
                      "name": "PYTHON_ENABLE_INIT_INDEXING",
                      "value": "[variables('valueOne')]"
                    },
                    {
                      "name": "PYTHON_ISOLATE_WORKER_DEPENDENCIES",
                      "value": "[variables('valueOne')]"
                    },
                    {
                      "name": "SQLDB_CONNECTION_STRING",
                      "value": "TBD"
                    },
                    {
                      "name": "SQLDB_SERVER",
                      "value": "[parameters('sqlServerName')]"
                    },
                    {
                      "name": "SQLDB_DATABASE",
                      "value": "[parameters('sqlDbName')]"
                    },
                    {
                      "name": "SQLDB_USERNAME",
                      "value": "[parameters('sqlDbUser')]"
                    },
                    {
                      "name": "SQLDB_PASSWORD",
                      "value": "[parameters('sqlDbPwd')]"
                    },
                    {
                      "name": "AZURE_SQL_SYSTEM_PROMPT",
                      "value": "[parameters('sqlSystemPrompt')]"
                    },
                    {
                      "name": "AZURE_CALL_TRANSCRIPT_SYSTEM_PROMPT",
                      "value": "[parameters('callTranscriptSystemPrompt')]"
                    },
                    {
                      "name": "AZURE_OPENAI_STREAM_TEXT_SYSTEM_PROMPT",
                      "value": "[parameters('streamTextSystemPrompt')]"
                    },
                    {
                      "name": "SQLDB_USER_MID",
                      "value": "[parameters('userassignedIdentityClientId')]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.App/managedEnvironments', format('{0}env', parameters('solutionName')))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_sql_db')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_azure_function_script_url",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionName": {
            "value": "[parameters('solutionPrefix')]"
          },
          "identity": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.id]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "12214749843316064247"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the location for resources."
              }
            },
            "identity": {
              "type": "string"
            }
          },
          "variables": {
            "functionAppName": "[format('{0}fn', parameters('solutionName'))]",
            "functionName": "stream_openai_text"
          },
          "resources": [],
          "outputs": {
            "functionAppUrl": {
              "type": "string",
              "value": "[format('https://{0}/api/{1}', reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2021-02-01').defaultHostName, variables('functionName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'deploy_azure_function')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_app_service",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionName": {
            "value": "[parameters('solutionPrefix')]"
          },
          "AzureSearchService": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiSearchService.value]"
          },
          "AzureSearchIndex": {
            "value": "transcripts_index"
          },
          "AzureSearchKey": {
            "reference": {
              "keyVault": {
                "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.KeyVault/vaults', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.keyvaultName.value)]"
              },
              "secretName": "AZURE-SEARCH-KEY"
            }
          },
          "AzureSearchUseSemanticSearch": {
            "value": "True"
          },
          "AzureSearchSemanticSearchConfig": {
            "value": "my-semantic-config"
          },
          "AzureSearchIndexIsPrechunked": {
            "value": "False"
          },
          "AzureSearchTopK": {
            "value": "5"
          },
          "AzureSearchContentColumns": {
            "value": "content"
          },
          "AzureSearchFilenameColumn": {
            "value": "chunk_id"
          },
          "AzureSearchTitleColumn": {
            "value": "client_id"
          },
          "AzureSearchUrlColumn": {
            "value": "sourceurl"
          },
          "AzureOpenAIResource": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiServicesTarget.value]"
          },
          "AzureOpenAIEndpoint": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiServicesTarget.value]"
          },
          "AzureOpenAIModel": {
            "value": "[parameters('gptModelName')]"
          },
          "AzureOpenAIKey": {
            "reference": {
              "keyVault": {
                "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.KeyVault/vaults', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.keyvaultName.value)]"
              },
              "secretName": "AZURE-OPENAI-KEY"
            }
          },
          "AzureOpenAIModelName": {
            "value": "[parameters('gptModelName')]"
          },
          "AzureOpenAITemperature": {
            "value": "0"
          },
          "AzureOpenAITopP": {
            "value": "1"
          },
          "AzureOpenAIMaxTokens": {
            "value": "1000"
          },
          "AzureOpenAIStopSequence": {
            "value": ""
          },
          "AzureOpenAISystemMessage": {
            "value": "You are a helpful Wealth Advisor assistant"
          },
          "AzureOpenAIApiVersion": {
            "value": "[parameters('azureOpenaiAPIVersion')]"
          },
          "AzureOpenAIStream": {
            "value": "True"
          },
          "AzureSearchQueryType": {
            "value": "simple"
          },
          "AzureSearchVectorFields": {
            "value": "contentVector"
          },
          "AzureSearchPermittedGroupsField": {
            "value": ""
          },
          "AzureSearchStrictness": {
            "value": "3"
          },
          "AzureOpenAIEmbeddingName": {
            "value": "[parameters('embeddingModel')]"
          },
          "AzureOpenAIEmbeddingkey": {
            "reference": {
              "keyVault": {
                "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.KeyVault/vaults', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.keyvaultName.value)]"
              },
              "secretName": "AZURE-OPENAI-KEY"
            }
          },
          "AzureOpenAIEmbeddingEndpoint": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiServicesTarget.value]"
          },
          "USE_AZUREFUNCTION": {
            "value": "True"
          },
          "STREAMING_AZUREFUNCTION_ENDPOINT": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy_azure_function_script_url'), '2022-09-01').outputs.functionAppUrl.value]"
          },
          "SQLDB_SERVER": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_sql_db'), '2022-09-01').outputs.sqlServerName.value]"
          },
          "SQLDB_DATABASE": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_sql_db'), '2022-09-01').outputs.sqlDbName.value]"
          },
          "SQLDB_USERNAME": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_sql_db'), '2022-09-01').outputs.sqlDbUser.value]"
          },
          "SQLDB_PASSWORD": {
            "reference": {
              "keyVault": {
                "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.KeyVault/vaults', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.keyvaultName.value)]"
              },
              "secretName": "SQLDB-PASSWORD"
            }
          },
          "AZURE_COSMOSDB_ACCOUNT": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_cosmos_db'), '2022-09-01').outputs.cosmosOutput.value.cosmosAccountName]"
          },
          "AZURE_COSMOSDB_CONVERSATIONS_CONTAINER": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_cosmos_db'), '2022-09-01').outputs.cosmosOutput.value.cosmosContainerName]"
          },
          "AZURE_COSMOSDB_DATABASE": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_cosmos_db'), '2022-09-01').outputs.cosmosOutput.value.cosmosDatabaseName]"
          },
          "AZURE_COSMOSDB_ENABLE_FEEDBACK": {
            "value": "True"
          },
          "Appversion": {
            "value": "[variables('appversion')]"
          },
          "userassignedIdentityClientId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityWebAppOutput.value.clientId]"
          },
          "userassignedIdentityId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityWebAppOutput.value.id]"
          },
          "applicationInsightsId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.applicationInsightsId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "12602038934270166131"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string",
              "minLength": 3,
              "maxLength": 15,
              "metadata": {
                "description": "Solution Name"
              }
            },
            "HostingPlanName": {
              "type": "string",
              "defaultValue": "[format('{0}-app-service-plan', parameters('solutionName'))]",
              "metadata": {
                "description": "Name of App Service plan"
              }
            },
            "HostingPlanSku": {
              "type": "string",
              "defaultValue": "B2",
              "allowedValues": [
                "F1",
                "D1",
                "B1",
                "B2",
                "B3",
                "S1",
                "S2",
                "S3",
                "P1",
                "P2",
                "P3",
                "P4",
                "P0v3"
              ],
              "metadata": {
                "description": "The pricing tier for the App Service plan"
              }
            },
            "WebsiteName": {
              "type": "string",
              "defaultValue": "[format('{0}-app-service', parameters('solutionName'))]",
              "metadata": {
                "description": "Name of Web App"
              }
            },
            "AzureSearchService": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Name of Azure Search Service"
              }
            },
            "AzureSearchIndex": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Name of Azure Search Index"
              }
            },
            "AzureSearchKey": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Azure Search Admin Key"
              }
            },
            "AzureSearchUseSemanticSearch": {
              "type": "string",
              "defaultValue": "False",
              "metadata": {
                "description": "Use semantic search"
              }
            },
            "AzureSearchSemanticSearchConfig": {
              "type": "string",
              "defaultValue": "default",
              "metadata": {
                "description": "Semantic search config"
              }
            },
            "AzureSearchIndexIsPrechunked": {
              "type": "string",
              "defaultValue": "False",
              "metadata": {
                "description": "Is the index prechunked"
              }
            },
            "AzureSearchTopK": {
              "type": "string",
              "defaultValue": "5",
              "metadata": {
                "description": "Top K results"
              }
            },
            "AzureSearchEnableInDomain": {
              "type": "string",
              "defaultValue": "False",
              "metadata": {
                "description": "Enable in domain"
              }
            },
            "AzureSearchContentColumns": {
              "type": "string",
              "defaultValue": "content",
              "metadata": {
                "description": "Content columns"
              }
            },
            "AzureSearchFilenameColumn": {
              "type": "string",
              "defaultValue": "filename",
              "metadata": {
                "description": "Filename column"
              }
            },
            "AzureSearchTitleColumn": {
              "type": "string",
              "defaultValue": "client_id",
              "metadata": {
                "description": "Title column"
              }
            },
            "AzureSearchUrlColumn": {
              "type": "string",
              "defaultValue": "sourceurl",
              "metadata": {
                "description": "Url column"
              }
            },
            "AzureOpenAIResource": {
              "type": "string",
              "metadata": {
                "description": "Name of Azure OpenAI Resource"
              }
            },
            "AzureOpenAIModel": {
              "type": "string",
              "metadata": {
                "description": "Azure OpenAI Model Deployment Name"
              }
            },
            "AzureOpenAIModelName": {
              "type": "string",
              "defaultValue": "gpt-4o-mini",
              "metadata": {
                "description": "Azure OpenAI Model Name"
              }
            },
            "AzureOpenAIEndpoint": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Azure Open AI Endpoint"
              }
            },
            "AzureOpenAIKey": {
              "type": "securestring",
              "metadata": {
                "description": "Azure OpenAI Key"
              }
            },
            "AzureOpenAITemperature": {
              "type": "string",
              "defaultValue": "0",
              "metadata": {
                "description": "Azure OpenAI Temperature"
              }
            },
            "AzureOpenAITopP": {
              "type": "string",
              "defaultValue": "1",
              "metadata": {
                "description": "Azure OpenAI Top P"
              }
            },
            "AzureOpenAIMaxTokens": {
              "type": "string",
              "defaultValue": "1000",
              "metadata": {
                "description": "Azure OpenAI Max Tokens"
              }
            },
            "AzureOpenAIStopSequence": {
              "type": "string",
              "defaultValue": "\n",
              "metadata": {
                "description": "Azure OpenAI Stop Sequence"
              }
            },
            "AzureOpenAISystemMessage": {
              "type": "string",
              "defaultValue": "You are an AI assistant that helps people find information.",
              "metadata": {
                "description": "Azure OpenAI System Message"
              }
            },
            "AzureOpenAIApiVersion": {
              "type": "string",
              "defaultValue": "2024-02-15-preview",
              "metadata": {
                "description": "Azure OpenAI Api Version"
              }
            },
            "AzureOpenAIStream": {
              "type": "string",
              "defaultValue": "True",
              "metadata": {
                "description": "Whether or not to stream responses from Azure OpenAI"
              }
            },
            "AzureSearchQueryType": {
              "type": "string",
              "defaultValue": "simple",
              "allowedValues": [
                "simple",
                "semantic",
                "vector",
                "vectorSimpleHybrid",
                "vectorSemanticHybrid"
              ],
              "metadata": {
                "description": "Azure Search Query Type"
              }
            },
            "AzureSearchVectorFields": {
              "type": "string",
              "defaultValue": "contentVector",
              "metadata": {
                "description": "Azure Search Vector Fields"
              }
            },
            "AzureSearchPermittedGroupsField": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Azure Search Permitted Groups Field"
              }
            },
            "AzureSearchStrictness": {
              "type": "string",
              "defaultValue": "3",
              "allowedValues": [
                "1",
                "2",
                "3",
                "4",
                "5"
              ],
              "metadata": {
                "description": "Azure Search Strictness"
              }
            },
            "AzureOpenAIEmbeddingName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Azure OpenAI Embedding Deployment Name"
              }
            },
            "AzureOpenAIEmbeddingkey": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Azure Open AI Embedding Key"
              }
            },
            "AzureOpenAIEmbeddingEndpoint": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Azure Open AI Embedding Endpoint"
              }
            },
            "WebAppEnableChatHistory": {
              "type": "string",
              "defaultValue": "False",
              "metadata": {
                "description": "Enable chat history by deploying a Cosmos DB instance"
              }
            },
            "USE_AZUREFUNCTION": {
              "type": "string",
              "defaultValue": "True",
              "metadata": {
                "description": "Use Azure Function"
              }
            },
            "STREAMING_AZUREFUNCTION_ENDPOINT": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Azure Function Endpoint"
              }
            },
            "SQLDB_SERVER": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "SQL Database Server Name"
              }
            },
            "SQLDB_DATABASE": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "SQL Database Name"
              }
            },
            "SQLDB_USERNAME": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "SQL Database Username"
              }
            },
            "SQLDB_PASSWORD": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "SQL Database Password"
              }
            },
            "AZURE_COSMOSDB_ACCOUNT": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Azure Cosmos DB Account"
              }
            },
            "AZURE_COSMOSDB_CONVERSATIONS_CONTAINER": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Azure Cosmos DB Conversations Container"
              }
            },
            "AZURE_COSMOSDB_DATABASE": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Azure Cosmos DB Database"
              }
            },
            "AZURE_COSMOSDB_ENABLE_FEEDBACK": {
              "type": "string",
              "defaultValue": "True",
              "metadata": {
                "description": "Enable feedback in Cosmos DB"
              }
            },
            "Appversion": {
              "type": "string"
            },
            "userassignedIdentityId": {
              "type": "string"
            },
            "userassignedIdentityClientId": {
              "type": "string"
            },
            "applicationInsightsId": {
              "type": "string"
            }
          },
          "variables": {
            "WebAppImageName": "[format('DOCKER|bycwacontainerreg.azurecr.io/byc-wa-app:{0}', parameters('Appversion'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2020-06-01",
              "name": "[parameters('HostingPlanName')]",
              "location": "[resourceGroup().location]",
              "sku": {
                "name": "[parameters('HostingPlanSku')]"
              },
              "properties": {
                "name": "[parameters('HostingPlanName')]",
                "reserved": true
              },
              "kind": "linux"
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2020-06-01",
              "name": "[parameters('WebsiteName')]",
              "location": "[resourceGroup().location]",
              "identity": {
                "type": "SystemAssigned, UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('userassignedIdentityId'))]": {}
                }
              },
              "properties": {
                "serverFarmId": "[parameters('HostingPlanName')]",
                "siteConfig": {
                  "appSettings": [
                    {
                      "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                      "value": "[reference(parameters('applicationInsightsId'), '2015-05-01').InstrumentationKey]"
                    },
                    {
                      "name": "AZURE_SEARCH_SERVICE",
                      "value": "[parameters('AzureSearchService')]"
                    },
                    {
                      "name": "AZURE_SEARCH_INDEX",
                      "value": "[parameters('AzureSearchIndex')]"
                    },
                    {
                      "name": "AZURE_SEARCH_KEY",
                      "value": "[parameters('AzureSearchKey')]"
                    },
                    {
                      "name": "AZURE_SEARCH_USE_SEMANTIC_SEARCH",
                      "value": "[parameters('AzureSearchUseSemanticSearch')]"
                    },
                    {
                      "name": "AZURE_SEARCH_SEMANTIC_SEARCH_CONFIG",
                      "value": "[parameters('AzureSearchSemanticSearchConfig')]"
                    },
                    {
                      "name": "AZURE_SEARCH_INDEX_IS_PRECHUNKED",
                      "value": "[parameters('AzureSearchIndexIsPrechunked')]"
                    },
                    {
                      "name": "AZURE_SEARCH_TOP_K",
                      "value": "[parameters('AzureSearchTopK')]"
                    },
                    {
                      "name": "AZURE_SEARCH_ENABLE_IN_DOMAIN",
                      "value": "[parameters('AzureSearchEnableInDomain')]"
                    },
                    {
                      "name": "AZURE_SEARCH_CONTENT_COLUMNS",
                      "value": "[parameters('AzureSearchContentColumns')]"
                    },
                    {
                      "name": "AZURE_SEARCH_FILENAME_COLUMN",
                      "value": "[parameters('AzureSearchFilenameColumn')]"
                    },
                    {
                      "name": "AZURE_SEARCH_TITLE_COLUMN",
                      "value": "[parameters('AzureSearchTitleColumn')]"
                    },
                    {
                      "name": "AZURE_SEARCH_URL_COLUMN",
                      "value": "[parameters('AzureSearchUrlColumn')]"
                    },
                    {
                      "name": "AZURE_OPENAI_RESOURCE",
                      "value": "[parameters('AzureOpenAIResource')]"
                    },
                    {
                      "name": "AZURE_OPENAI_MODEL",
                      "value": "[parameters('AzureOpenAIModel')]"
                    },
                    {
                      "name": "AZURE_OPENAI_ENDPOINT",
                      "value": "[parameters('AzureOpenAIEndpoint')]"
                    },
                    {
                      "name": "AZURE_OPENAI_KEY",
                      "value": "[parameters('AzureOpenAIKey')]"
                    },
                    {
                      "name": "AZURE_OPENAI_MODEL_NAME",
                      "value": "[parameters('AzureOpenAIModelName')]"
                    },
                    {
                      "name": "AZURE_OPENAI_TEMPERATURE",
                      "value": "[parameters('AzureOpenAITemperature')]"
                    },
                    {
                      "name": "AZURE_OPENAI_TOP_P",
                      "value": "[parameters('AzureOpenAITopP')]"
                    },
                    {
                      "name": "AZURE_OPENAI_MAX_TOKENS",
                      "value": "[parameters('AzureOpenAIMaxTokens')]"
                    },
                    {
                      "name": "AZURE_OPENAI_STOP_SEQUENCE",
                      "value": "[parameters('AzureOpenAIStopSequence')]"
                    },
                    {
                      "name": "AZURE_OPENAI_SYSTEM_MESSAGE",
                      "value": "[parameters('AzureOpenAISystemMessage')]"
                    },
                    {
                      "name": "AZURE_OPENAI_PREVIEW_API_VERSION",
                      "value": "[parameters('AzureOpenAIApiVersion')]"
                    },
                    {
                      "name": "AZURE_OPENAI_STREAM",
                      "value": "[parameters('AzureOpenAIStream')]"
                    },
                    {
                      "name": "AZURE_SEARCH_QUERY_TYPE",
                      "value": "[parameters('AzureSearchQueryType')]"
                    },
                    {
                      "name": "AZURE_SEARCH_VECTOR_COLUMNS",
                      "value": "[parameters('AzureSearchVectorFields')]"
                    },
                    {
                      "name": "AZURE_SEARCH_PERMITTED_GROUPS_COLUMN",
                      "value": "[parameters('AzureSearchPermittedGroupsField')]"
                    },
                    {
                      "name": "AZURE_SEARCH_STRICTNESS",
                      "value": "[parameters('AzureSearchStrictness')]"
                    },
                    {
                      "name": "AZURE_OPENAI_EMBEDDING_NAME",
                      "value": "[parameters('AzureOpenAIEmbeddingName')]"
                    },
                    {
                      "name": "AZURE_OPENAI_EMBEDDING_KEY",
                      "value": "[parameters('AzureOpenAIEmbeddingkey')]"
                    },
                    {
                      "name": "AZURE_OPENAI_EMBEDDING_ENDPOINT",
                      "value": "[parameters('AzureOpenAIEmbeddingEndpoint')]"
                    },
                    {
                      "name": "WEB_APP_ENABLE_CHAT_HISTORY",
                      "value": "[parameters('WebAppEnableChatHistory')]"
                    },
                    {
                      "name": "SQLDB_SERVER",
                      "value": "[parameters('SQLDB_SERVER')]"
                    },
                    {
                      "name": "SQLDB_DATABASE",
                      "value": "[parameters('SQLDB_DATABASE')]"
                    },
                    {
                      "name": "SQLDB_USERNAME",
                      "value": "[parameters('SQLDB_USERNAME')]"
                    },
                    {
                      "name": "SQLDB_PASSWORD",
                      "value": "[parameters('SQLDB_PASSWORD')]"
                    },
                    {
                      "name": "USE_AZUREFUNCTION",
                      "value": "[parameters('USE_AZUREFUNCTION')]"
                    },
                    {
                      "name": "STREAMING_AZUREFUNCTION_ENDPOINT",
                      "value": "[parameters('STREAMING_AZUREFUNCTION_ENDPOINT')]"
                    },
                    {
                      "name": "AZURE_COSMOSDB_ACCOUNT",
                      "value": "[parameters('AZURE_COSMOSDB_ACCOUNT')]"
                    },
                    {
                      "name": "AZURE_COSMOSDB_CONVERSATIONS_CONTAINER",
                      "value": "[parameters('AZURE_COSMOSDB_CONVERSATIONS_CONTAINER')]"
                    },
                    {
                      "name": "AZURE_COSMOSDB_DATABASE",
                      "value": "[parameters('AZURE_COSMOSDB_DATABASE')]"
                    },
                    {
                      "name": "AZURE_COSMOSDB_ENABLE_FEEDBACK",
                      "value": "[parameters('AZURE_COSMOSDB_ENABLE_FEEDBACK')]"
                    },
                    {
                      "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
                      "value": "true"
                    },
                    {
                      "name": "UWSGI_PROCESSES",
                      "value": "2"
                    },
                    {
                      "name": "UWSGI_THREADS",
                      "value": "2"
                    },
                    {
                      "name": "SQLDB_USER_MID",
                      "value": "[parameters('userassignedIdentityClientId')]"
                    }
                  ],
                  "linuxFxVersion": "[variables('WebAppImageName')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', parameters('HostingPlanName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('cosmos-sql-user-role-{0}', parameters('WebsiteName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "accountName": {
                    "value": "[parameters('AZURE_COSMOSDB_ACCOUNT')]"
                  },
                  "roleDefinitionId": {
                    "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', split(format('{0}/00000000-0000-0000-0000-000000000002', parameters('AZURE_COSMOSDB_ACCOUNT')), '/')[0], split(format('{0}/00000000-0000-0000-0000-000000000002', parameters('AZURE_COSMOSDB_ACCOUNT')), '/')[1])]"
                  },
                  "principalId": {
                    "value": "[reference(resourceId('Microsoft.Web/sites', parameters('WebsiteName')), '2020-06-01', 'full').identity.principalId]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "14262313259972528331"
                    },
                    "description": "Creates a SQL role assignment under an Azure Cosmos DB account."
                  },
                  "parameters": {
                    "accountName": {
                      "type": "string"
                    },
                    "roleDefinitionId": {
                      "type": "string"
                    },
                    "principalId": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
                      "apiVersion": "2022-05-15",
                      "name": "[format('{0}/{1}', parameters('accountName'), guid(parameters('roleDefinitionId'), parameters('principalId'), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('accountName'))))]",
                      "properties": {
                        "principalId": "[parameters('principalId')]",
                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                        "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('accountName'))]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('WebsiteName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry')]",
        "[resourceId('Microsoft.Resources/deployments', 'deploy_azure_function_script_url')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_cosmos_db')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_sql_db')]"
      ]
    }
  ]
}