{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.36.1.42791",
      "templateHash": "8950753165543697743"
    }
  },
  "parameters": {
    "environmentName": {
      "type": "string",
      "minLength": 3,
      "maxLength": 20,
      "metadata": {
        "description": "A unique prefix for all resources in this deployment. This should be 3-20 characters long:"
      }
    },
    "existingLogAnalyticsWorkspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional: Existing Log Analytics Workspace Resource ID"
      }
    },
    "cosmosLocation": {
      "type": "string",
      "metadata": {
        "description": "CosmosDB Location"
      }
    },
    "deploymentType": {
      "type": "string",
      "defaultValue": "GlobalStandard",
      "allowedValues": [
        "Standard",
        "GlobalStandard"
      ],
      "minLength": 1,
      "metadata": {
        "description": "GPT model deployment type:"
      }
    },
    "gptModelName": {
      "type": "string",
      "defaultValue": "gpt-4o-mini",
      "allowedValues": [
        "gpt-4o-mini"
      ],
      "minLength": 1,
      "metadata": {
        "description": "Name of the GPT model to deploy:"
      }
    },
    "azureOpenaiAPIVersion": {
      "type": "string",
      "defaultValue": "2025-04-01-preview"
    },
    "gptDeploymentCapacity": {
      "type": "int",
      "defaultValue": 30,
      "minValue": 10,
      "metadata": {
        "description": "Capacity of the GPT deployment:"
      }
    },
    "embeddingModel": {
      "type": "string",
      "defaultValue": "text-embedding-ada-002",
      "allowedValues": [
        "text-embedding-ada-002"
      ],
      "minLength": 1,
      "metadata": {
        "description": "Name of the Text Embedding model to deploy:"
      }
    },
    "embeddingDeploymentCapacity": {
      "type": "int",
      "defaultValue": 80,
      "minValue": 10,
      "metadata": {
        "description": "Capacity of the Embedding Model deployment"
      }
    },
    "imageTag": {
      "type": "string",
      "defaultValue": "latest"
    },
    "AzureOpenAILocation": {
      "type": "string",
      "defaultValue": "eastus2",
      "allowedValues": [
        "australiaeast",
        "eastus",
        "eastus2",
        "francecentral",
        "japaneast",
        "swedencentral",
        "uksouth",
        "westus",
        "westus3"
      ],
      "metadata": {
        "description": "Azure OpenAI Location"
      }
    },
    "AZURE_LOCATION": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Set this if you want to deploy to a different region than the resource group. Otherwise, it will use the resource group location by default."
      }
    }
  },
  "variables": {
    "$fxv#0": {
      "ai": {
        "aiSearch": "srch-",
        "aiFoundry": "aif-",
        "aiFoundryProject": "aifp-",
        "aiServices": "aisa-",
        "aiVideoIndexer": "avi-",
        "machineLearningWorkspace": "mlw-",
        "openAIService": "oai-",
        "botService": "bot-",
        "computerVision": "cv-",
        "contentModerator": "cm-",
        "contentSafety": "cs-",
        "customVisionPrediction": "cstv-",
        "customVisionTraining": "cstvt-",
        "documentIntelligence": "di-",
        "faceApi": "face-",
        "healthInsights": "hi-",
        "immersiveReader": "ir-",
        "languageService": "lang-",
        "speechService": "spch-",
        "translator": "trsl-",
        "aiHub": "aih-",
        "aiHubProject": "aihp-"
      },
      "analytics": {
        "analysisServicesServer": "as",
        "databricksWorkspace": "dbw-",
        "dataExplorerCluster": "dec",
        "dataExplorerClusterDatabase": "dedb",
        "dataFactory": "adf-",
        "digitalTwin": "dt-",
        "streamAnalytics": "asa-",
        "synapseAnalyticsPrivateLinkHub": "synplh-",
        "synapseAnalyticsSQLDedicatedPool": "syndp",
        "synapseAnalyticsSparkPool": "synsp",
        "synapseAnalyticsWorkspaces": "synw",
        "dataLakeStoreAccount": "dls",
        "dataLakeAnalyticsAccount": "dla",
        "eventHubsNamespace": "evhns-",
        "eventHub": "evh-",
        "eventGridDomain": "evgd-",
        "eventGridSubscriptions": "evgs-",
        "eventGridTopic": "evgt-",
        "eventGridSystemTopic": "egst-",
        "hdInsightHadoopCluster": "hadoop-",
        "hdInsightHBaseCluster": "hbase-",
        "hdInsightKafkaCluster": "kafka-",
        "hdInsightSparkCluster": "spark-",
        "hdInsightStormCluster": "storm-",
        "hdInsightMLServicesCluster": "mls-",
        "iotHub": "iot-",
        "provisioningServices": "provs-",
        "provisioningServicesCertificate": "pcert-",
        "powerBIEmbedded": "pbi-",
        "timeSeriesInsightsEnvironment": "tsi-"
      },
      "compute": {
        "appServiceEnvironment": "ase-",
        "appServicePlan": "asp-",
        "loadTesting": "lt-",
        "availabilitySet": "avail-",
        "arcEnabledServer": "arcs-",
        "arcEnabledKubernetesCluster": "arck",
        "batchAccounts": "ba-",
        "cloudService": "cld-",
        "communicationServices": "acs-",
        "diskEncryptionSet": "des",
        "functionApp": "func-",
        "gallery": "gal",
        "hostingEnvironment": "host-",
        "imageTemplate": "it-",
        "managedDiskOS": "osdisk",
        "managedDiskData": "disk",
        "notificationHubs": "ntf-",
        "notificationHubsNamespace": "ntfns-",
        "proximityPlacementGroup": "ppg-",
        "restorePointCollection": "rpc-",
        "snapshot": "snap-",
        "staticWebApp": "stapp-",
        "virtualMachine": "vm",
        "virtualMachineScaleSet": "vmss-",
        "virtualMachineMaintenanceConfiguration": "mc-",
        "virtualMachineStorageAccount": "stvm",
        "webApp": "app-"
      },
      "containers": {
        "aksCluster": "aks-",
        "aksSystemNodePool": "npsystem-",
        "aksUserNodePool": "np-",
        "containerApp": "ca-",
        "containerAppsEnvironment": "cae-",
        "containerRegistry": "cr",
        "containerInstance": "ci",
        "serviceFabricCluster": "sf-",
        "serviceFabricManagedCluster": "sfmc-"
      },
      "databases": {
        "cosmosDBDatabase": "cosmos-",
        "cosmosDBApacheCassandra": "coscas-",
        "cosmosDBMongoDB": "cosmon-",
        "cosmosDBNoSQL": "cosno-",
        "cosmosDBTable": "costab-",
        "cosmosDBGremlin": "cosgrm-",
        "cosmosDBPostgreSQL": "cospos-",
        "cacheForRedis": "redis-",
        "sqlDatabaseServer": "sql-",
        "sqlDatabase": "sqldb-",
        "sqlElasticJobAgent": "sqlja-",
        "sqlElasticPool": "sqlep-",
        "mariaDBServer": "maria-",
        "mariaDBDatabase": "mariadb-",
        "mySQLDatabase": "mysql-",
        "postgreSQLDatabase": "psql-",
        "sqlServerStretchDatabase": "sqlstrdb-",
        "sqlManagedInstance": "sqlmi-"
      },
      "developerTools": {
        "appConfigurationStore": "appcs-",
        "mapsAccount": "map-",
        "signalR": "sigr",
        "webPubSub": "wps-"
      },
      "devOps": {
        "managedGrafana": "amg-"
      },
      "integration": {
        "apiManagementService": "apim-",
        "integrationAccount": "ia-",
        "logicApp": "logic-",
        "serviceBusNamespace": "sbns-",
        "serviceBusQueue": "sbq-",
        "serviceBusTopic": "sbt-",
        "serviceBusTopicSubscription": "sbts-"
      },
      "managementGovernance": {
        "automationAccount": "aa-",
        "applicationInsights": "appi-",
        "monitorActionGroup": "ag-",
        "monitorDataCollectionRules": "dcr-",
        "monitorAlertProcessingRule": "apr-",
        "blueprint": "bp-",
        "blueprintAssignment": "bpa-",
        "dataCollectionEndpoint": "dce-",
        "logAnalyticsWorkspace": "log-",
        "logAnalyticsQueryPacks": "pack-",
        "managementGroup": "mg-",
        "purviewInstance": "pview-",
        "resourceGroup": "rg-",
        "templateSpecsName": "ts-"
      },
      "migration": {
        "migrateProject": "migr-",
        "databaseMigrationService": "dms-",
        "recoveryServicesVault": "rsv-"
      },
      "networking": {
        "applicationGateway": "agw-",
        "applicationSecurityGroup": "asg-",
        "cdnProfile": "cdnp-",
        "cdnEndpoint": "cdne-",
        "connections": "con-",
        "dnsForwardingRuleset": "dnsfrs-",
        "dnsPrivateResolver": "dnspr-",
        "dnsPrivateResolverInboundEndpoint": "in-",
        "dnsPrivateResolverOutboundEndpoint": "out-",
        "firewall": "afw-",
        "firewallPolicy": "afwp-",
        "expressRouteCircuit": "erc-",
        "expressRouteGateway": "ergw-",
        "frontDoorProfile": "afd-",
        "frontDoorEndpoint": "fde-",
        "frontDoorFirewallPolicy": "fdfp-",
        "ipGroups": "ipg-",
        "loadBalancerInternal": "lbi-",
        "loadBalancerExternal": "lbe-",
        "loadBalancerRule": "rule-",
        "localNetworkGateway": "lgw-",
        "natGateway": "ng-",
        "networkInterface": "nic-",
        "networkSecurityGroup": "nsg-",
        "networkSecurityGroupSecurityRules": "nsgsr-",
        "networkWatcher": "nw-",
        "privateLink": "pl-",
        "privateEndpoint": "pep-",
        "publicIPAddress": "pip-",
        "publicIPAddressPrefix": "ippre-",
        "routeFilter": "rf-",
        "routeServer": "rtserv-",
        "routeTable": "rt-",
        "serviceEndpointPolicy": "se-",
        "trafficManagerProfile": "traf-",
        "userDefinedRoute": "udr-",
        "virtualNetwork": "vnet-",
        "virtualNetworkGateway": "vgw-",
        "virtualNetworkManager": "vnm-",
        "virtualNetworkPeering": "peer-",
        "virtualNetworkSubnet": "snet-",
        "virtualWAN": "vwan-",
        "virtualWANHub": "vhub-"
      },
      "security": {
        "bastion": "bas-",
        "keyVault": "kv-",
        "keyVaultManagedHSM": "kvmhsm-",
        "managedIdentity": "id-",
        "sshKey": "sshkey-",
        "vpnGateway": "vpng-",
        "vpnConnection": "vcn-",
        "vpnSite": "vst-",
        "webApplicationFirewallPolicy": "waf",
        "webApplicationFirewallPolicyRuleGroup": "wafrg"
      },
      "storage": {
        "storSimple": "ssimp",
        "backupVault": "bvault-",
        "backupVaultPolicy": "bkpol-",
        "fileShare": "share-",
        "storageAccount": "st",
        "storageSyncService": "sss-"
      },
      "virtualDesktop": {
        "labServicesPlan": "lp-",
        "virtualDesktopHostPool": "vdpool-",
        "virtualDesktopApplicationGroup": "vdag-",
        "virtualDesktopWorkspace": "vdws-",
        "virtualDesktopScalingPlan": "vdscaling-"
      }
    },
    "solutionLocation": "[if(empty(parameters('AZURE_LOCATION')), resourceGroup().location, parameters('AZURE_LOCATION'))]",
    "uniqueId": "[toLower(uniqueString(parameters('environmentName'), subscription().id, variables('solutionLocation')))]",
    "solutionPrefix": "[format('ca{0}', padLeft(take(variables('uniqueId'), 12), 12, '0'))]",
    "abbrs": "[variables('$fxv#0')]",
    "functionAppSqlPrompt": "Generate a valid T-SQL query to find {query} for tables and columns provided below:\n   1. Table: Clients\n   Columns: ClientId, Client, Email, Occupation, MaritalStatus, Dependents\n   2. Table: InvestmentGoals\n   Columns: ClientId, InvestmentGoal\n   3. Table: Assets\n   Columns: ClientId, AssetDate, Investment, ROI, Revenue, AssetType\n   4. Table: ClientSummaries\n   Columns: ClientId, ClientSummary\n   5. Table: InvestmentGoalsDetails\n   Columns: ClientId, InvestmentGoal, TargetAmount, Contribution\n   6. Table: Retirement\n   Columns: ClientId, StatusDate, RetirementGoalProgress, EducationGoalProgress\n   7. Table: ClientMeetings\n   Columns: ClientId, ConversationId, Title, StartTime, EndTime, Advisor, ClientEmail\n   Always use the Investment column from the Assets table as the value.\n   Assets table has snapshots of values by date. Do not add numbers across different dates for total values.\n   Do not use client name in filters.\n   Do not include assets values unless asked for.\n   ALWAYS use ClientId = {clientid} in the query filter.\n   ALWAYS select Client Name (Column: Client) in the query.\n   Query filters are IMPORTANT. Add filters like AssetType, AssetDate, etc. if needed.\n   Only return the generated SQL query. Do not return anything else.",
    "functionAppCallTranscriptSystemPrompt": "You are an assistant who supports wealth advisors in preparing for client meetings. \n  You have access to the client’s past meeting call transcripts. \n  When answering questions, especially summary requests, provide a detailed and structured response that includes key topics, concerns, decisions, and trends. \n  If no data is available, state 'No relevant data found for previous meetings.",
    "functionAppStreamTextSystemPrompt": "The currently selected client's name is '{SelectedClientName}'. Treat any case-insensitive or partial mention as referring to this client.\n  If the user mentions no name, assume they are asking about '{SelectedClientName}'..\n  If the user references a name that clearly differs from '{SelectedClientName}', respond only with: 'Please only ask questions about the selected client or select another client.' Otherwise, provide thorough answers for every question using only data from SQL or call transcripts.'\n  If no data is found, respond with 'No data found for that client.' Remove any client identifiers from the final response.\n  Always send clientId as '{client_id}'."
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_managed_identity",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionName": {
            "value": "[variables('solutionPrefix')]"
          },
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          },
          "miName": {
            "value": "[format('{0}{1}', variables('abbrs').security.managedIdentity, variables('solutionPrefix'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "1287895326947269968"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string",
              "minLength": 3,
              "maxLength": 15,
              "metadata": {
                "description": "Solution Name"
              }
            },
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Solution Location"
              }
            },
            "miName": {
              "type": "string",
              "metadata": {
                "description": "Name"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[parameters('miName')]",
              "location": "[parameters('solutionLocation')]",
              "tags": {
                "app": "[parameters('solutionName')]",
                "location": "[parameters('solutionLocation')]"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceGroup().id, resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName')), resourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName')), '2023-01-31').principalId]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName'))]"
              ]
            },
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[format('{0}-webapp', parameters('miName'))]",
              "location": "[parameters('solutionLocation')]",
              "tags": {
                "app": "[parameters('solutionName')]",
                "location": "[parameters('solutionLocation')]"
              }
            }
          ],
          "outputs": {
            "managedIdentityOutput": {
              "type": "object",
              "value": {
                "id": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName'))]",
                "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName')), '2023-01-31').principalId]",
                "clientId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName')), '2023-01-31').clientId]",
                "name": "[parameters('miName')]"
              }
            },
            "managedIdentityWebAppOutput": {
              "type": "object",
              "value": {
                "id": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-webapp', parameters('miName')))]",
                "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-webapp', parameters('miName'))), '2023-01-31').principalId]",
                "clientId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-webapp', parameters('miName'))), '2023-01-31').clientId]",
                "name": "[format('{0}-webapp', parameters('miName'))]"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_keyvault",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionName": {
            "value": "[variables('solutionPrefix')]"
          },
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          },
          "managedIdentityObjectId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.objectId]"
          },
          "kvName": {
            "value": "[format('{0}{1}', variables('abbrs').security.keyVault, variables('solutionPrefix'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "2457137526968921597"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string",
              "minLength": 3,
              "maxLength": 15,
              "metadata": {
                "description": "Solution Name"
              }
            },
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Solution Location"
              }
            },
            "utc": {
              "type": "string",
              "defaultValue": "[utcNow()]"
            },
            "kvName": {
              "type": "string",
              "metadata": {
                "description": "Name"
              }
            },
            "createMode": {
              "type": "string",
              "defaultValue": "default",
              "metadata": {
                "description": "Create Mode"
              }
            },
            "enableForDeployment": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enabled For Deployment. Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault."
              }
            },
            "enableForDiskEncryption": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enabled For Disk Encryption. Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
              }
            },
            "enableForTemplateDeployment": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enabled For Template Deployment. Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
              }
            },
            "enableRBACAuthorization": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable RBAC Authorization. Property that controls how data actions are authorized."
              }
            },
            "softDeleteRetentionInDays": {
              "type": "int",
              "defaultValue": 7,
              "metadata": {
                "description": "Soft Delete Retention in Days. softDelete data retention days. It accepts >=7 and <=90."
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "enabled",
              "allowedValues": [
                "enabled",
                "disabled"
              ],
              "metadata": {
                "description": "Public Network Access, Property to specify whether the vault will accept traffic from public internet."
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "standard",
              "allowedValues": [
                "standard",
                "premium"
              ],
              "metadata": {
                "description": "SKU"
              }
            },
            "managedIdentityObjectId": {
              "type": "string"
            }
          },
          "variables": {
            "vaultUri": "[format('https://{0}.vault.azure.net/', parameters('kvName'))]"
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2022-07-01",
              "name": "[parameters('kvName')]",
              "location": "[parameters('solutionLocation')]",
              "tags": {
                "app": "[parameters('solutionName')]",
                "location": "[parameters('solutionLocation')]"
              },
              "properties": {
                "accessPolicies": [
                  {
                    "objectId": "[parameters('managedIdentityObjectId')]",
                    "permissions": {
                      "certificates": [
                        "all"
                      ],
                      "keys": [
                        "all"
                      ],
                      "secrets": [
                        "all"
                      ],
                      "storage": [
                        "all"
                      ]
                    },
                    "tenantId": "[subscription().tenantId]"
                  }
                ],
                "createMode": "[parameters('createMode')]",
                "enabledForDeployment": "[parameters('enableForDeployment')]",
                "enabledForDiskEncryption": "[parameters('enableForDiskEncryption')]",
                "enabledForTemplateDeployment": "[parameters('enableForTemplateDeployment')]",
                "enableRbacAuthorization": "[parameters('enableRBACAuthorization')]",
                "softDeleteRetentionInDays": "[parameters('softDeleteRetentionInDays')]",
                "provisioningState": "RegisteringDns",
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                "sku": {
                  "family": "A",
                  "name": "[parameters('sku')]"
                },
                "tenantId": "[subscription().tenantId]",
                "vaultUri": "[variables('vaultUri')]"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceGroup().id, parameters('managedIdentityObjectId'), resourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483'))]",
              "properties": {
                "principalId": "[parameters('managedIdentityObjectId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                "principalType": "ServicePrincipal"
              }
            }
          ],
          "outputs": {
            "keyvaultName": {
              "type": "string",
              "value": "[parameters('kvName')]"
            },
            "keyvaultId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('kvName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_ai_foundry",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionName": {
            "value": "[variables('solutionPrefix')]"
          },
          "solutionLocation": {
            "value": "[parameters('AzureOpenAILocation')]"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault'), '2022-09-01').outputs.keyvaultName.value]"
          },
          "deploymentType": {
            "value": "[parameters('deploymentType')]"
          },
          "gptModelName": {
            "value": "[parameters('gptModelName')]"
          },
          "azureOpenaiAPIVersion": {
            "value": "[parameters('azureOpenaiAPIVersion')]"
          },
          "gptDeploymentCapacity": {
            "value": "[parameters('gptDeploymentCapacity')]"
          },
          "embeddingModel": {
            "value": "[parameters('embeddingModel')]"
          },
          "embeddingDeploymentCapacity": {
            "value": "[parameters('embeddingDeploymentCapacity')]"
          },
          "existingLogAnalyticsWorkspaceId": {
            "value": "[parameters('existingLogAnalyticsWorkspaceId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "15647067587936233417"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string"
            },
            "solutionLocation": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            },
            "deploymentType": {
              "type": "string"
            },
            "gptModelName": {
              "type": "string"
            },
            "azureOpenaiAPIVersion": {
              "type": "string"
            },
            "gptDeploymentCapacity": {
              "type": "int"
            },
            "embeddingModel": {
              "type": "string"
            },
            "embeddingDeploymentCapacity": {
              "type": "int"
            },
            "existingLogAnalyticsWorkspaceId": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "$fxv#0": {
              "ai": {
                "aiSearch": "srch-",
                "aiFoundry": "aif-",
                "aiFoundryProject": "aifp-",
                "aiServices": "aisa-",
                "aiVideoIndexer": "avi-",
                "machineLearningWorkspace": "mlw-",
                "openAIService": "oai-",
                "botService": "bot-",
                "computerVision": "cv-",
                "contentModerator": "cm-",
                "contentSafety": "cs-",
                "customVisionPrediction": "cstv-",
                "customVisionTraining": "cstvt-",
                "documentIntelligence": "di-",
                "faceApi": "face-",
                "healthInsights": "hi-",
                "immersiveReader": "ir-",
                "languageService": "lang-",
                "speechService": "spch-",
                "translator": "trsl-",
                "aiHub": "aih-",
                "aiHubProject": "aihp-"
              },
              "analytics": {
                "analysisServicesServer": "as",
                "databricksWorkspace": "dbw-",
                "dataExplorerCluster": "dec",
                "dataExplorerClusterDatabase": "dedb",
                "dataFactory": "adf-",
                "digitalTwin": "dt-",
                "streamAnalytics": "asa-",
                "synapseAnalyticsPrivateLinkHub": "synplh-",
                "synapseAnalyticsSQLDedicatedPool": "syndp",
                "synapseAnalyticsSparkPool": "synsp",
                "synapseAnalyticsWorkspaces": "synw",
                "dataLakeStoreAccount": "dls",
                "dataLakeAnalyticsAccount": "dla",
                "eventHubsNamespace": "evhns-",
                "eventHub": "evh-",
                "eventGridDomain": "evgd-",
                "eventGridSubscriptions": "evgs-",
                "eventGridTopic": "evgt-",
                "eventGridSystemTopic": "egst-",
                "hdInsightHadoopCluster": "hadoop-",
                "hdInsightHBaseCluster": "hbase-",
                "hdInsightKafkaCluster": "kafka-",
                "hdInsightSparkCluster": "spark-",
                "hdInsightStormCluster": "storm-",
                "hdInsightMLServicesCluster": "mls-",
                "iotHub": "iot-",
                "provisioningServices": "provs-",
                "provisioningServicesCertificate": "pcert-",
                "powerBIEmbedded": "pbi-",
                "timeSeriesInsightsEnvironment": "tsi-"
              },
              "compute": {
                "appServiceEnvironment": "ase-",
                "appServicePlan": "asp-",
                "loadTesting": "lt-",
                "availabilitySet": "avail-",
                "arcEnabledServer": "arcs-",
                "arcEnabledKubernetesCluster": "arck",
                "batchAccounts": "ba-",
                "cloudService": "cld-",
                "communicationServices": "acs-",
                "diskEncryptionSet": "des",
                "functionApp": "func-",
                "gallery": "gal",
                "hostingEnvironment": "host-",
                "imageTemplate": "it-",
                "managedDiskOS": "osdisk",
                "managedDiskData": "disk",
                "notificationHubs": "ntf-",
                "notificationHubsNamespace": "ntfns-",
                "proximityPlacementGroup": "ppg-",
                "restorePointCollection": "rpc-",
                "snapshot": "snap-",
                "staticWebApp": "stapp-",
                "virtualMachine": "vm",
                "virtualMachineScaleSet": "vmss-",
                "virtualMachineMaintenanceConfiguration": "mc-",
                "virtualMachineStorageAccount": "stvm",
                "webApp": "app-"
              },
              "containers": {
                "aksCluster": "aks-",
                "aksSystemNodePool": "npsystem-",
                "aksUserNodePool": "np-",
                "containerApp": "ca-",
                "containerAppsEnvironment": "cae-",
                "containerRegistry": "cr",
                "containerInstance": "ci",
                "serviceFabricCluster": "sf-",
                "serviceFabricManagedCluster": "sfmc-"
              },
              "databases": {
                "cosmosDBDatabase": "cosmos-",
                "cosmosDBApacheCassandra": "coscas-",
                "cosmosDBMongoDB": "cosmon-",
                "cosmosDBNoSQL": "cosno-",
                "cosmosDBTable": "costab-",
                "cosmosDBGremlin": "cosgrm-",
                "cosmosDBPostgreSQL": "cospos-",
                "cacheForRedis": "redis-",
                "sqlDatabaseServer": "sql-",
                "sqlDatabase": "sqldb-",
                "sqlElasticJobAgent": "sqlja-",
                "sqlElasticPool": "sqlep-",
                "mariaDBServer": "maria-",
                "mariaDBDatabase": "mariadb-",
                "mySQLDatabase": "mysql-",
                "postgreSQLDatabase": "psql-",
                "sqlServerStretchDatabase": "sqlstrdb-",
                "sqlManagedInstance": "sqlmi-"
              },
              "developerTools": {
                "appConfigurationStore": "appcs-",
                "mapsAccount": "map-",
                "signalR": "sigr",
                "webPubSub": "wps-"
              },
              "devOps": {
                "managedGrafana": "amg-"
              },
              "integration": {
                "apiManagementService": "apim-",
                "integrationAccount": "ia-",
                "logicApp": "logic-",
                "serviceBusNamespace": "sbns-",
                "serviceBusQueue": "sbq-",
                "serviceBusTopic": "sbt-",
                "serviceBusTopicSubscription": "sbts-"
              },
              "managementGovernance": {
                "automationAccount": "aa-",
                "applicationInsights": "appi-",
                "monitorActionGroup": "ag-",
                "monitorDataCollectionRules": "dcr-",
                "monitorAlertProcessingRule": "apr-",
                "blueprint": "bp-",
                "blueprintAssignment": "bpa-",
                "dataCollectionEndpoint": "dce-",
                "logAnalyticsWorkspace": "log-",
                "logAnalyticsQueryPacks": "pack-",
                "managementGroup": "mg-",
                "purviewInstance": "pview-",
                "resourceGroup": "rg-",
                "templateSpecsName": "ts-"
              },
              "migration": {
                "migrateProject": "migr-",
                "databaseMigrationService": "dms-",
                "recoveryServicesVault": "rsv-"
              },
              "networking": {
                "applicationGateway": "agw-",
                "applicationSecurityGroup": "asg-",
                "cdnProfile": "cdnp-",
                "cdnEndpoint": "cdne-",
                "connections": "con-",
                "dnsForwardingRuleset": "dnsfrs-",
                "dnsPrivateResolver": "dnspr-",
                "dnsPrivateResolverInboundEndpoint": "in-",
                "dnsPrivateResolverOutboundEndpoint": "out-",
                "firewall": "afw-",
                "firewallPolicy": "afwp-",
                "expressRouteCircuit": "erc-",
                "expressRouteGateway": "ergw-",
                "frontDoorProfile": "afd-",
                "frontDoorEndpoint": "fde-",
                "frontDoorFirewallPolicy": "fdfp-",
                "ipGroups": "ipg-",
                "loadBalancerInternal": "lbi-",
                "loadBalancerExternal": "lbe-",
                "loadBalancerRule": "rule-",
                "localNetworkGateway": "lgw-",
                "natGateway": "ng-",
                "networkInterface": "nic-",
                "networkSecurityGroup": "nsg-",
                "networkSecurityGroupSecurityRules": "nsgsr-",
                "networkWatcher": "nw-",
                "privateLink": "pl-",
                "privateEndpoint": "pep-",
                "publicIPAddress": "pip-",
                "publicIPAddressPrefix": "ippre-",
                "routeFilter": "rf-",
                "routeServer": "rtserv-",
                "routeTable": "rt-",
                "serviceEndpointPolicy": "se-",
                "trafficManagerProfile": "traf-",
                "userDefinedRoute": "udr-",
                "virtualNetwork": "vnet-",
                "virtualNetworkGateway": "vgw-",
                "virtualNetworkManager": "vnm-",
                "virtualNetworkPeering": "peer-",
                "virtualNetworkSubnet": "snet-",
                "virtualWAN": "vwan-",
                "virtualWANHub": "vhub-"
              },
              "security": {
                "bastion": "bas-",
                "keyVault": "kv-",
                "keyVaultManagedHSM": "kvmhsm-",
                "managedIdentity": "id-",
                "sshKey": "sshkey-",
                "vpnGateway": "vpng-",
                "vpnConnection": "vcn-",
                "vpnSite": "vst-",
                "webApplicationFirewallPolicy": "waf",
                "webApplicationFirewallPolicyRuleGroup": "wafrg"
              },
              "storage": {
                "storSimple": "ssimp",
                "backupVault": "bvault-",
                "backupVaultPolicy": "bkpol-",
                "fileShare": "share-",
                "storageAccount": "st",
                "storageSyncService": "sss-"
              },
              "virtualDesktop": {
                "labServicesPlan": "lp-",
                "virtualDesktopHostPool": "vdpool-",
                "virtualDesktopApplicationGroup": "vdag-",
                "virtualDesktopWorkspace": "vdws-",
                "virtualDesktopScalingPlan": "vdscaling-"
              }
            },
            "abbrs": "[variables('$fxv#0')]",
            "aiFoundryName": "[format('{0}{1}', variables('abbrs').ai.aiFoundry, parameters('solutionName'))]",
            "applicationInsightsName": "[format('{0}{1}', variables('abbrs').managementGovernance.applicationInsights, parameters('solutionName'))]",
            "keyvaultName": "[parameters('keyVaultName')]",
            "location": "[parameters('solutionLocation')]",
            "aiProjectName": "[format('{0}{1}', variables('abbrs').ai.aiFoundryProject, parameters('solutionName'))]",
            "aiProjectFriendlyName": "[variables('aiProjectName')]",
            "aiProjectDescription": "AI Foundry Project",
            "aiSearchName": "[format('{0}{1}', variables('abbrs').ai.aiSearch, parameters('solutionName'))]",
            "workspaceName": "[format('{0}{1}', variables('abbrs').managementGovernance.logAnalyticsWorkspace, parameters('solutionName'))]",
            "aiModelDeployments": [
              {
                "name": "[parameters('gptModelName')]",
                "model": "[parameters('gptModelName')]",
                "sku": {
                  "name": "[parameters('deploymentType')]",
                  "capacity": "[parameters('gptDeploymentCapacity')]"
                },
                "raiPolicyName": "Microsoft.Default"
              },
              {
                "name": "[parameters('embeddingModel')]",
                "model": "[parameters('embeddingModel')]",
                "sku": {
                  "name": "Standard",
                  "capacity": "[parameters('embeddingDeploymentCapacity')]"
                },
                "raiPolicyName": "Microsoft.Default"
              }
            ],
            "useExisting": "[not(empty(parameters('existingLogAnalyticsWorkspaceId')))]",
            "existingLawSubscription": "[if(variables('useExisting'), split(parameters('existingLogAnalyticsWorkspaceId'), '/')[2], '')]",
            "existingLawResourceGroup": "[if(variables('useExisting'), split(parameters('existingLogAnalyticsWorkspaceId'), '/')[4], '')]",
            "existingLawName": "[if(variables('useExisting'), split(parameters('existingLogAnalyticsWorkspaceId'), '/')[8], '')]"
          },
          "resources": [
            {
              "condition": "[not(variables('useExisting'))]",
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2023-09-01",
              "name": "[variables('workspaceName')]",
              "location": "[variables('location')]",
              "tags": {},
              "properties": {
                "retentionInDays": 30,
                "sku": {
                  "name": "PerGB2018"
                }
              }
            },
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[variables('applicationInsightsName')]",
              "location": "[variables('location')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "publicNetworkAccessForIngestion": "Enabled",
                "publicNetworkAccessForQuery": "Enabled",
                "WorkspaceResourceId": "[if(variables('useExisting'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingLawSubscription'), variables('existingLawResourceGroup')), 'Microsoft.OperationalInsights/workspaces', variables('existingLawName')), resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName')))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]"
              ]
            },
            {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2025-04-01-preview",
              "name": "[variables('aiFoundryName')]",
              "location": "[variables('location')]",
              "sku": {
                "name": "S0"
              },
              "kind": "AIServices",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "allowProjectManagement": true,
                "customSubDomainName": "[variables('aiFoundryName')]",
                "networkAcls": {
                  "defaultAction": "Allow",
                  "virtualNetworkRules": [],
                  "ipRules": []
                },
                "publicNetworkAccess": "Enabled",
                "disableLocalAuth": false
              }
            },
            {
              "type": "Microsoft.CognitiveServices/accounts/projects",
              "apiVersion": "2025-04-01-preview",
              "name": "[format('{0}/{1}', variables('aiFoundryName'), variables('aiProjectName'))]",
              "location": "[variables('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "description": "[variables('aiProjectDescription')]",
                "displayName": "[variables('aiProjectFriendlyName')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiFoundryName'))]"
              ]
            },
            {
              "copy": {
                "name": "aiFModelDeployments",
                "count": "[length(variables('aiModelDeployments'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', variables('aiFoundryName'), variables('aiModelDeployments')[copyIndex()].name)]",
              "properties": {
                "model": {
                  "format": "OpenAI",
                  "name": "[variables('aiModelDeployments')[copyIndex()].model]"
                },
                "raiPolicyName": "[variables('aiModelDeployments')[copyIndex()].raiPolicyName]"
              },
              "sku": {
                "name": "[variables('aiModelDeployments')[copyIndex()].sku.name]",
                "capacity": "[variables('aiModelDeployments')[copyIndex()].sku.capacity]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiFoundryName'))]"
              ]
            },
            {
              "type": "Microsoft.Search/searchServices",
              "apiVersion": "2025-02-01-preview",
              "name": "[variables('aiSearchName')]",
              "location": "[parameters('solutionLocation')]",
              "sku": {
                "name": "basic"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "replicaCount": 1,
                "partitionCount": 1,
                "hostingMode": "default",
                "publicNetworkAccess": "enabled",
                "networkRuleSet": {
                  "ipRules": []
                },
                "encryptionWithCmk": {
                  "enforcement": "Unspecified"
                },
                "disableLocalAuth": false,
                "authOptions": {
                  "aadOrApiKey": {
                    "aadAuthFailureMode": "http403"
                  }
                },
                "semanticSearch": "free"
              }
            },
            {
              "type": "Microsoft.CognitiveServices/accounts/connections",
              "apiVersion": "2025-04-01-preview",
              "name": "[format('{0}/{1}', variables('aiFoundryName'), 'foundry-search-connection')]",
              "properties": {
                "category": "CognitiveSearch",
                "target": "[reference(resourceId('Microsoft.Search/searchServices', variables('aiSearchName')), '2025-02-01-preview').endpoint]",
                "authType": "AAD",
                "isSharedToAll": true,
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]",
                  "location": "[reference(resourceId('Microsoft.Search/searchServices', variables('aiSearchName')), '2025-02-01-preview', 'full').location]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiFoundryName'))]",
                "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', variables('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', variables('aiSearchName')), resourceId('Microsoft.CognitiveServices/accounts', variables('aiFoundryName')), extensionResourceId(resourceId('Microsoft.Search/searchServices', variables('aiSearchName')), 'Microsoft.Authorization/roleDefinitions', '1407120a-92aa-4202-b7e9-c0e197c71c8f'))]",
              "properties": {
                "roleDefinitionId": "[extensionResourceId(resourceId('Microsoft.Search/searchServices', variables('aiSearchName')), 'Microsoft.Authorization/roleDefinitions', '1407120a-92aa-4202-b7e9-c0e197c71c8f')]",
                "principalId": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('aiFoundryName')), '2025-04-01-preview', 'full').identity.principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiFoundryName'))]",
                "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', variables('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', variables('aiSearchName')), resourceId('Microsoft.CognitiveServices/accounts', variables('aiFoundryName')), extensionResourceId(resourceId('Microsoft.Search/searchServices', variables('aiSearchName')), 'Microsoft.Authorization/roleDefinitions', '7ca78c08-252a-4471-8644-bb5ff32d4ba0'))]",
              "properties": {
                "roleDefinitionId": "[extensionResourceId(resourceId('Microsoft.Search/searchServices', variables('aiSearchName')), 'Microsoft.Authorization/roleDefinitions', '7ca78c08-252a-4471-8644-bb5ff32d4ba0')]",
                "principalId": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('aiFoundryName')), '2025-04-01-preview', 'full').identity.principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiFoundryName'))]",
                "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
              ]
            },
            {
              "type": "Microsoft.CognitiveServices/accounts/connections",
              "apiVersion": "2025-04-01-preview",
              "name": "[format('{0}/{1}', variables('aiFoundryName'), 'foundry-app-insights-connection')]",
              "properties": {
                "category": "AppInsights",
                "target": "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]",
                "authType": "ApiKey",
                "isSharedToAll": true,
                "credentials": {
                  "key": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName')), '2020-02-02').ConnectionString]"
                },
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiFoundryName'))]",
                "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-PREVIEW-API-VERSION')]",
              "properties": {
                "value": "[parameters('azureOpenaiAPIVersion')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-ENDPOINT')]",
              "properties": {
                "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('aiFoundryName')), '2025-04-01-preview').endpoints['OpenAI Language Model Instance API']]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiFoundryName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-EMBEDDING-MODEL')]",
              "properties": {
                "value": "[parameters('embeddingModel')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-SEARCH-ENDPOINT')]",
              "properties": {
                "value": "[format('https://{0}.search.windows.net', variables('aiSearchName'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-SEARCH-INDEX')]",
              "properties": {
                "value": "transcripts_index"
              }
            }
          ],
          "outputs": {
            "keyvaultName": {
              "type": "string",
              "value": "[variables('keyvaultName')]"
            },
            "keyvaultId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            },
            "aiFoundryProjectEndpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts/projects', variables('aiFoundryName'), variables('aiProjectName')), '2025-04-01-preview').endpoints['AI Foundry API']]"
            },
            "aiServicesTarget": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('aiFoundryName')), '2025-04-01-preview').endpoint]"
            },
            "aoaiEndpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('aiFoundryName')), '2025-04-01-preview').endpoints['OpenAI Language Model Instance API']]"
            },
            "aiFoundryName": {
              "type": "string",
              "value": "[variables('aiFoundryName')]"
            },
            "aiFoundryId": {
              "type": "string",
              "value": "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiFoundryName'))]"
            },
            "aiSearchName": {
              "type": "string",
              "value": "[variables('aiSearchName')]"
            },
            "aiSearchId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
            },
            "aiSearchTarget": {
              "type": "string",
              "value": "[format('https://{0}.search.windows.net', variables('aiSearchName'))]"
            },
            "aiSearchService": {
              "type": "string",
              "value": "[variables('aiSearchName')]"
            },
            "aiFoundryProjectName": {
              "type": "string",
              "value": "[variables('aiProjectName')]"
            },
            "applicationInsightsId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]"
            },
            "logAnalyticsWorkspaceResourceName": {
              "type": "string",
              "value": "[if(variables('useExisting'), variables('existingLawName'), variables('workspaceName'))]"
            },
            "logAnalyticsWorkspaceResourceGroup": {
              "type": "string",
              "value": "[if(variables('useExisting'), variables('existingLawResourceGroup'), resourceGroup().name)]"
            },
            "applicationInsightsConnectionString": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName')), '2020-02-02').ConnectionString]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_cosmos_db",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionLocation": {
            "value": "[parameters('cosmosLocation')]"
          },
          "cosmosDBName": {
            "value": "[format('{0}{1}', variables('abbrs').databases.cosmosDBDatabase, variables('solutionPrefix'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "12179523327793839969"
            }
          },
          "parameters": {
            "solutionLocation": {
              "type": "string"
            },
            "cosmosDBName": {
              "type": "string",
              "metadata": {
                "description": "Name"
              }
            },
            "databaseName": {
              "type": "string",
              "defaultValue": "db_conversation_history"
            },
            "collectionName": {
              "type": "string",
              "defaultValue": "conversations"
            },
            "containers": {
              "type": "array",
              "defaultValue": [
                {
                  "name": "[parameters('collectionName')]",
                  "id": "[parameters('collectionName')]",
                  "partitionKey": "/userId"
                }
              ]
            },
            "kind": {
              "type": "string",
              "defaultValue": "GlobalDocumentDB",
              "allowedValues": [
                "GlobalDocumentDB",
                "MongoDB",
                "Parse"
              ]
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "copy": {
                "name": "database::list",
                "count": "[length(parameters('containers'))]"
              },
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2022-05-15",
              "name": "[format('{0}/{1}/{2}', split(format('{0}/{1}', parameters('cosmosDBName'), parameters('databaseName')), '/')[0], split(format('{0}/{1}', parameters('cosmosDBName'), parameters('databaseName')), '/')[1], parameters('containers')[copyIndex()].name)]",
              "properties": {
                "resource": {
                  "id": "[parameters('containers')[copyIndex()].id]",
                  "partitionKey": {
                    "paths": [
                      "[parameters('containers')[copyIndex()].partitionKey]"
                    ]
                  }
                },
                "options": {}
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', split(format('{0}/{1}', parameters('cosmosDBName'), parameters('databaseName')), '/')[0], split(format('{0}/{1}', parameters('cosmosDBName'), parameters('databaseName')), '/')[1])]"
              ]
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2022-08-15",
              "name": "[parameters('cosmosDBName')]",
              "kind": "[parameters('kind')]",
              "location": "[parameters('solutionLocation')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "consistencyPolicy": {
                  "defaultConsistencyLevel": "Session"
                },
                "locations": [
                  {
                    "locationName": "[parameters('solutionLocation')]",
                    "failoverPriority": 0,
                    "isZoneRedundant": false
                  }
                ],
                "databaseAccountOfferType": "Standard",
                "enableAutomaticFailover": false,
                "enableMultipleWriteLocations": false,
                "disableLocalAuth": true,
                "apiProperties": "[if(equals(parameters('kind'), 'MongoDB'), createObject('serverVersion', '4.0'), createObject())]",
                "capabilities": [
                  {
                    "name": "EnableServerless"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
              "apiVersion": "2022-05-15",
              "name": "[format('{0}/{1}', parameters('cosmosDBName'), parameters('databaseName'))]",
              "properties": {
                "resource": {
                  "id": "[parameters('databaseName')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDBName'))]"
              ]
            }
          ],
          "outputs": {
            "cosmosAccountName": {
              "type": "string",
              "value": "[parameters('cosmosDBName')]"
            },
            "cosmosDatabaseName": {
              "type": "string",
              "value": "[parameters('databaseName')]"
            },
            "cosmosContainerName": {
              "type": "string",
              "value": "[parameters('collectionName')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_storage_account",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          },
          "managedIdentityObjectId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.objectId]"
          },
          "saName": {
            "value": "[format('{0}{1}', variables('abbrs').storage.storageAccount, variables('solutionPrefix'))]"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault'), '2022-09-01').outputs.keyvaultName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "9019656445963157268"
            }
          },
          "parameters": {
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Solution Location"
              }
            },
            "saName": {
              "type": "string",
              "metadata": {
                "description": "Name"
              }
            },
            "managedIdentityObjectId": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2022-09-01",
              "name": "[parameters('saName')]",
              "location": "[parameters('solutionLocation')]",
              "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
              },
              "kind": "StorageV2",
              "properties": {
                "minimumTlsVersion": "TLS1_2",
                "allowBlobPublicAccess": false,
                "isHnsEnabled": true,
                "networkAcls": {
                  "bypass": "AzureServices",
                  "virtualNetworkRules": [],
                  "ipRules": [],
                  "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                  "services": {
                    "file": {
                      "keyType": "Account",
                      "enabled": true
                    },
                    "blob": {
                      "keyType": "Account",
                      "enabled": true
                    }
                  },
                  "keySource": "Microsoft.Storage"
                },
                "accessTier": "Hot",
                "allowSharedKeyAccess": false
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/{1}', parameters('saName'), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": []
                },
                "deleteRetentionPolicy": {
                  "allowPermanentDelete": false,
                  "enabled": false
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('saName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/{1}/{2}', parameters('saName'), 'default', 'data')]",
              "properties": {
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "None"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('saName'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('saName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceGroup().id, parameters('managedIdentityObjectId'), resourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe'))]",
              "properties": {
                "principalId": "[parameters('managedIdentityObjectId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'ADLS-ACCOUNT-NAME')]",
              "properties": {
                "value": "[parameters('saName')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'ADLS-ACCOUNT-CONTAINER')]",
              "properties": {
                "value": "data"
              }
            }
          ],
          "outputs": {
            "storageName": {
              "type": "string",
              "value": "[parameters('saName')]"
            },
            "storageContainer": {
              "type": "string",
              "value": "data"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_sql_db",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault'), '2022-09-01').outputs.keyvaultName.value]"
          },
          "managedIdentityObjectId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.objectId]"
          },
          "managedIdentityName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.name]"
          },
          "serverName": {
            "value": "[format('{0}{1}', variables('abbrs').databases.sqlDatabaseServer, variables('solutionPrefix'))]"
          },
          "sqlDBName": {
            "value": "[format('{0}{1}', variables('abbrs').databases.sqlDatabase, variables('solutionPrefix'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "6152102507143828636"
            }
          },
          "parameters": {
            "solutionLocation": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            },
            "managedIdentityObjectId": {
              "type": "string"
            },
            "managedIdentityName": {
              "type": "string"
            },
            "serverName": {
              "type": "string",
              "metadata": {
                "description": "The name of the SQL logical server."
              }
            },
            "sqlDBName": {
              "type": "string",
              "metadata": {
                "description": "The name of the SQL Database."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[parameters('solutionLocation')]",
              "metadata": {
                "description": "Location for all resources."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Sql/servers",
              "apiVersion": "2023-08-01-preview",
              "name": "[parameters('serverName')]",
              "location": "[parameters('location')]",
              "kind": "v12.0",
              "properties": {
                "publicNetworkAccess": "Enabled",
                "version": "12.0",
                "restrictOutboundNetworkAccess": "Disabled",
                "minimalTlsVersion": "1.2",
                "administrators": {
                  "login": "[parameters('managedIdentityName')]",
                  "sid": "[parameters('managedIdentityObjectId')]",
                  "tenantId": "[subscription().tenantId]",
                  "administratorType": "ActiveDirectory",
                  "azureADOnlyAuthentication": true
                }
              }
            },
            {
              "type": "Microsoft.Sql/servers/firewallRules",
              "apiVersion": "2023-08-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), 'AllowSpecificRange')]",
              "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "255.255.255.255"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('serverName'))]"
              ]
            },
            {
              "type": "Microsoft.Sql/servers/firewallRules",
              "apiVersion": "2023-08-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), 'AllowAllWindowsAzureIps')]",
              "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "0.0.0.0"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('serverName'))]"
              ]
            },
            {
              "type": "Microsoft.Sql/servers/databases",
              "apiVersion": "2023-08-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), parameters('sqlDBName'))]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "GP_S_Gen5",
                "tier": "GeneralPurpose",
                "family": "Gen5",
                "capacity": 2
              },
              "kind": "v12.0,user,vcore,serverless",
              "properties": {
                "collation": "SQL_Latin1_General_CP1_CI_AS",
                "autoPauseDelay": 60,
                "minCapacity": 1,
                "readScale": "Disabled",
                "zoneRedundant": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('serverName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'SQLDB-SERVER')]",
              "properties": {
                "value": "[format('{0}.database.windows.net', parameters('serverName'))]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'SQLDB-DATABASE')]",
              "properties": {
                "value": "[parameters('sqlDBName')]"
              }
            }
          ],
          "outputs": {
            "sqlServerName": {
              "type": "string",
              "value": "[parameters('serverName')]"
            },
            "sqlDbName": {
              "type": "string",
              "value": "[parameters('sqlDBName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_app_service",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          },
          "HostingPlanName": {
            "value": "[format('{0}{1}', variables('abbrs').compute.appServicePlan, variables('solutionPrefix'))]"
          },
          "WebsiteName": {
            "value": "[format('{0}{1}', variables('abbrs').compute.webApp, variables('solutionPrefix'))]"
          },
          "AzureSearchService": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiSearchService.value]"
          },
          "AzureSearchIndex": {
            "value": "transcripts_index"
          },
          "AzureSearchUseSemanticSearch": {
            "value": "True"
          },
          "AzureSearchSemanticSearchConfig": {
            "value": "my-semantic-config"
          },
          "AzureSearchTopK": {
            "value": "5"
          },
          "AzureSearchContentColumns": {
            "value": "content"
          },
          "AzureSearchFilenameColumn": {
            "value": "chunk_id"
          },
          "AzureSearchTitleColumn": {
            "value": "client_id"
          },
          "AzureSearchUrlColumn": {
            "value": "sourceurl"
          },
          "AzureOpenAIResource": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiFoundryName.value]"
          },
          "AzureOpenAIEndpoint": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aoaiEndpoint.value]"
          },
          "AzureOpenAIModel": {
            "value": "[parameters('gptModelName')]"
          },
          "AzureOpenAITemperature": {
            "value": "0"
          },
          "AzureOpenAITopP": {
            "value": "1"
          },
          "AzureOpenAIMaxTokens": {
            "value": "1000"
          },
          "AzureOpenAIStopSequence": {
            "value": ""
          },
          "AzureOpenAISystemMessage": {
            "value": "You are a helpful Wealth Advisor assistant"
          },
          "AzureOpenAIApiVersion": {
            "value": "[parameters('azureOpenaiAPIVersion')]"
          },
          "AzureOpenAIStream": {
            "value": "True"
          },
          "AzureSearchQueryType": {
            "value": "simple"
          },
          "AzureSearchVectorFields": {
            "value": "contentVector"
          },
          "AzureSearchPermittedGroupsField": {
            "value": ""
          },
          "AzureSearchStrictness": {
            "value": "3"
          },
          "AzureOpenAIEmbeddingName": {
            "value": "[parameters('embeddingModel')]"
          },
          "AzureOpenAIEmbeddingEndpoint": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aoaiEndpoint.value]"
          },
          "USE_INTERNAL_STREAM": {
            "value": "True"
          },
          "SQLDB_SERVER": {
            "value": "[format('{0}.database.windows.net', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_sql_db'), '2022-09-01').outputs.sqlServerName.value)]"
          },
          "SQLDB_DATABASE": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_sql_db'), '2022-09-01').outputs.sqlDbName.value]"
          },
          "AZURE_COSMOSDB_ACCOUNT": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_cosmos_db'), '2022-09-01').outputs.cosmosAccountName.value]"
          },
          "AZURE_COSMOSDB_CONVERSATIONS_CONTAINER": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_cosmos_db'), '2022-09-01').outputs.cosmosContainerName.value]"
          },
          "AZURE_COSMOSDB_DATABASE": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_cosmos_db'), '2022-09-01').outputs.cosmosDatabaseName.value]"
          },
          "AZURE_COSMOSDB_ENABLE_FEEDBACK": {
            "value": "True"
          },
          "imageTag": {
            "value": "[parameters('imageTag')]"
          },
          "userassignedIdentityClientId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityWebAppOutput.value.clientId]"
          },
          "userassignedIdentityId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityWebAppOutput.value.id]"
          },
          "applicationInsightsId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.applicationInsightsId.value]"
          },
          "azureSearchServiceEndpoint": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiSearchTarget.value]"
          },
          "sqlSystemPrompt": {
            "value": "[variables('functionAppSqlPrompt')]"
          },
          "callTranscriptSystemPrompt": {
            "value": "[variables('functionAppCallTranscriptSystemPrompt')]"
          },
          "streamTextSystemPrompt": {
            "value": "[variables('functionAppStreamTextSystemPrompt')]"
          },
          "aiFoundryProjectName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiFoundryProjectName.value]"
          },
          "aiFoundryProjectEndpoint": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiFoundryProjectEndpoint.value]"
          },
          "aiFoundryName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiFoundryName.value]"
          },
          "applicationInsightsConnectionString": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.applicationInsightsConnectionString.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "6657678385477724168"
            }
          },
          "parameters": {
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Solution Location"
              }
            },
            "HostingPlanSku": {
              "type": "string",
              "defaultValue": "B2",
              "allowedValues": [
                "F1",
                "D1",
                "B1",
                "B2",
                "B3",
                "S1",
                "S2",
                "S3",
                "P1",
                "P2",
                "P3",
                "P4",
                "P0v3"
              ],
              "metadata": {
                "description": "The pricing tier for the App Service plan"
              }
            },
            "HostingPlanName": {
              "type": "string"
            },
            "WebsiteName": {
              "type": "string"
            },
            "AzureSearchService": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Name of Azure Search Service"
              }
            },
            "AzureSearchIndex": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Name of Azure Search Index"
              }
            },
            "AzureSearchUseSemanticSearch": {
              "type": "string",
              "defaultValue": "False",
              "metadata": {
                "description": "Use semantic search"
              }
            },
            "AzureSearchSemanticSearchConfig": {
              "type": "string",
              "defaultValue": "default",
              "metadata": {
                "description": "Semantic search config"
              }
            },
            "AzureSearchTopK": {
              "type": "string",
              "defaultValue": "5",
              "metadata": {
                "description": "Top K results"
              }
            },
            "AzureSearchEnableInDomain": {
              "type": "string",
              "defaultValue": "False",
              "metadata": {
                "description": "Enable in domain"
              }
            },
            "AzureSearchContentColumns": {
              "type": "string",
              "defaultValue": "content",
              "metadata": {
                "description": "Content columns"
              }
            },
            "AzureSearchFilenameColumn": {
              "type": "string",
              "defaultValue": "filename",
              "metadata": {
                "description": "Filename column"
              }
            },
            "AzureSearchTitleColumn": {
              "type": "string",
              "defaultValue": "client_id",
              "metadata": {
                "description": "Title column"
              }
            },
            "AzureSearchUrlColumn": {
              "type": "string",
              "defaultValue": "sourceurl",
              "metadata": {
                "description": "Url column"
              }
            },
            "AzureOpenAIResource": {
              "type": "string",
              "metadata": {
                "description": "Name of Azure OpenAI Resource"
              }
            },
            "AzureOpenAIModel": {
              "type": "string",
              "metadata": {
                "description": "Azure OpenAI Model Deployment Name"
              }
            },
            "AzureOpenAIEndpoint": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Azure Open AI Endpoint"
              }
            },
            "AzureOpenAITemperature": {
              "type": "string",
              "defaultValue": "0",
              "metadata": {
                "description": "Azure OpenAI Temperature"
              }
            },
            "AzureOpenAITopP": {
              "type": "string",
              "defaultValue": "1",
              "metadata": {
                "description": "Azure OpenAI Top P"
              }
            },
            "AzureOpenAIMaxTokens": {
              "type": "string",
              "defaultValue": "1000",
              "metadata": {
                "description": "Azure OpenAI Max Tokens"
              }
            },
            "AzureOpenAIStopSequence": {
              "type": "string",
              "defaultValue": "\n",
              "metadata": {
                "description": "Azure OpenAI Stop Sequence"
              }
            },
            "AzureOpenAISystemMessage": {
              "type": "string",
              "defaultValue": "You are an AI assistant that helps people find information.",
              "metadata": {
                "description": "Azure OpenAI System Message"
              }
            },
            "AzureOpenAIApiVersion": {
              "type": "string",
              "defaultValue": "2024-02-15-preview",
              "metadata": {
                "description": "Azure OpenAI Api Version"
              }
            },
            "AzureOpenAIStream": {
              "type": "string",
              "defaultValue": "True",
              "metadata": {
                "description": "Whether or not to stream responses from Azure OpenAI"
              }
            },
            "AzureSearchQueryType": {
              "type": "string",
              "defaultValue": "simple",
              "allowedValues": [
                "simple",
                "semantic",
                "vector",
                "vectorSimpleHybrid",
                "vectorSemanticHybrid"
              ],
              "metadata": {
                "description": "Azure Search Query Type"
              }
            },
            "AzureSearchVectorFields": {
              "type": "string",
              "defaultValue": "contentVector",
              "metadata": {
                "description": "Azure Search Vector Fields"
              }
            },
            "AzureSearchPermittedGroupsField": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Azure Search Permitted Groups Field"
              }
            },
            "AzureSearchStrictness": {
              "type": "string",
              "defaultValue": "3",
              "allowedValues": [
                "1",
                "2",
                "3",
                "4",
                "5"
              ],
              "metadata": {
                "description": "Azure Search Strictness"
              }
            },
            "AzureOpenAIEmbeddingName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Azure OpenAI Embedding Deployment Name"
              }
            },
            "AzureOpenAIEmbeddingEndpoint": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Azure Open AI Embedding Endpoint"
              }
            },
            "USE_INTERNAL_STREAM": {
              "type": "string",
              "defaultValue": "True",
              "metadata": {
                "description": "Use Azure Function"
              }
            },
            "SQLDB_SERVER": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "SQL Database Server Name"
              }
            },
            "SQLDB_DATABASE": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "SQL Database Name"
              }
            },
            "AZURE_COSMOSDB_ACCOUNT": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Azure Cosmos DB Account"
              }
            },
            "AZURE_COSMOSDB_CONVERSATIONS_CONTAINER": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Azure Cosmos DB Conversations Container"
              }
            },
            "AZURE_COSMOSDB_DATABASE": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Azure Cosmos DB Database"
              }
            },
            "AZURE_COSMOSDB_ENABLE_FEEDBACK": {
              "type": "string",
              "defaultValue": "True",
              "metadata": {
                "description": "Enable feedback in Cosmos DB"
              }
            },
            "imageTag": {
              "type": "string"
            },
            "userassignedIdentityId": {
              "type": "string"
            },
            "userassignedIdentityClientId": {
              "type": "string"
            },
            "applicationInsightsId": {
              "type": "string"
            },
            "azureSearchServiceEndpoint": {
              "type": "string"
            },
            "sqlSystemPrompt": {
              "type": "string",
              "metadata": {
                "description": "Azure Function App SQL System Prompt"
              }
            },
            "callTranscriptSystemPrompt": {
              "type": "string",
              "metadata": {
                "description": "Azure Function App CallTranscript System Prompt"
              }
            },
            "streamTextSystemPrompt": {
              "type": "string",
              "metadata": {
                "description": "Azure Function App Stream Text System Prompt"
              }
            },
            "aiFoundryProjectEndpoint": {
              "type": "string"
            },
            "useAIProjectClientFlag": {
              "type": "string",
              "defaultValue": "false"
            },
            "aiFoundryProjectName": {
              "type": "string"
            },
            "aiFoundryName": {
              "type": "string"
            },
            "applicationInsightsConnectionString": {
              "type": "string"
            }
          },
          "variables": {
            "WebAppImageName": "[format('DOCKER|bycwacontainerreg.azurecr.io/byc-wa-app:{0}', parameters('imageTag'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2020-06-01",
              "name": "[parameters('HostingPlanName')]",
              "location": "[parameters('solutionLocation')]",
              "sku": {
                "name": "[parameters('HostingPlanSku')]"
              },
              "properties": {
                "name": "[parameters('HostingPlanName')]",
                "reserved": true
              },
              "kind": "linux"
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2020-06-01",
              "name": "[parameters('WebsiteName')]",
              "location": "[parameters('solutionLocation')]",
              "identity": {
                "type": "SystemAssigned, UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('userassignedIdentityId'))]": {}
                }
              },
              "properties": {
                "serverFarmId": "[parameters('HostingPlanName')]",
                "siteConfig": {
                  "appSettings": [
                    {
                      "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                      "value": "[reference(parameters('applicationInsightsId'), '2015-05-01').InstrumentationKey]"
                    },
                    {
                      "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                      "value": "[parameters('applicationInsightsConnectionString')]"
                    },
                    {
                      "name": "AZURE_SEARCH_SERVICE",
                      "value": "[parameters('AzureSearchService')]"
                    },
                    {
                      "name": "AZURE_SEARCH_INDEX",
                      "value": "[parameters('AzureSearchIndex')]"
                    },
                    {
                      "name": "AZURE_SEARCH_USE_SEMANTIC_SEARCH",
                      "value": "[parameters('AzureSearchUseSemanticSearch')]"
                    },
                    {
                      "name": "AZURE_SEARCH_SEMANTIC_SEARCH_CONFIG",
                      "value": "[parameters('AzureSearchSemanticSearchConfig')]"
                    },
                    {
                      "name": "AZURE_SEARCH_TOP_K",
                      "value": "[parameters('AzureSearchTopK')]"
                    },
                    {
                      "name": "AZURE_SEARCH_ENABLE_IN_DOMAIN",
                      "value": "[parameters('AzureSearchEnableInDomain')]"
                    },
                    {
                      "name": "AZURE_SEARCH_CONTENT_COLUMNS",
                      "value": "[parameters('AzureSearchContentColumns')]"
                    },
                    {
                      "name": "AZURE_SEARCH_FILENAME_COLUMN",
                      "value": "[parameters('AzureSearchFilenameColumn')]"
                    },
                    {
                      "name": "AZURE_SEARCH_TITLE_COLUMN",
                      "value": "[parameters('AzureSearchTitleColumn')]"
                    },
                    {
                      "name": "AZURE_SEARCH_URL_COLUMN",
                      "value": "[parameters('AzureSearchUrlColumn')]"
                    },
                    {
                      "name": "AZURE_OPENAI_RESOURCE",
                      "value": "[parameters('AzureOpenAIResource')]"
                    },
                    {
                      "name": "AZURE_OPENAI_MODEL",
                      "value": "[parameters('AzureOpenAIModel')]"
                    },
                    {
                      "name": "AZURE_OPENAI_ENDPOINT",
                      "value": "[parameters('AzureOpenAIEndpoint')]"
                    },
                    {
                      "name": "AZURE_OPENAI_TEMPERATURE",
                      "value": "[parameters('AzureOpenAITemperature')]"
                    },
                    {
                      "name": "AZURE_OPENAI_TOP_P",
                      "value": "[parameters('AzureOpenAITopP')]"
                    },
                    {
                      "name": "AZURE_OPENAI_MAX_TOKENS",
                      "value": "[parameters('AzureOpenAIMaxTokens')]"
                    },
                    {
                      "name": "AZURE_OPENAI_STOP_SEQUENCE",
                      "value": "[parameters('AzureOpenAIStopSequence')]"
                    },
                    {
                      "name": "AZURE_OPENAI_SYSTEM_MESSAGE",
                      "value": "[parameters('AzureOpenAISystemMessage')]"
                    },
                    {
                      "name": "AZURE_OPENAI_PREVIEW_API_VERSION",
                      "value": "[parameters('AzureOpenAIApiVersion')]"
                    },
                    {
                      "name": "AZURE_OPENAI_STREAM",
                      "value": "[parameters('AzureOpenAIStream')]"
                    },
                    {
                      "name": "AZURE_SEARCH_QUERY_TYPE",
                      "value": "[parameters('AzureSearchQueryType')]"
                    },
                    {
                      "name": "AZURE_SEARCH_VECTOR_COLUMNS",
                      "value": "[parameters('AzureSearchVectorFields')]"
                    },
                    {
                      "name": "AZURE_SEARCH_PERMITTED_GROUPS_COLUMN",
                      "value": "[parameters('AzureSearchPermittedGroupsField')]"
                    },
                    {
                      "name": "AZURE_SEARCH_STRICTNESS",
                      "value": "[parameters('AzureSearchStrictness')]"
                    },
                    {
                      "name": "AZURE_OPENAI_EMBEDDING_NAME",
                      "value": "[parameters('AzureOpenAIEmbeddingName')]"
                    },
                    {
                      "name": "AZURE_OPENAI_EMBEDDING_ENDPOINT",
                      "value": "[parameters('AzureOpenAIEmbeddingEndpoint')]"
                    },
                    {
                      "name": "SQLDB_SERVER",
                      "value": "[parameters('SQLDB_SERVER')]"
                    },
                    {
                      "name": "SQLDB_DATABASE",
                      "value": "[parameters('SQLDB_DATABASE')]"
                    },
                    {
                      "name": "USE_INTERNAL_STREAM",
                      "value": "[parameters('USE_INTERNAL_STREAM')]"
                    },
                    {
                      "name": "AZURE_COSMOSDB_ACCOUNT",
                      "value": "[parameters('AZURE_COSMOSDB_ACCOUNT')]"
                    },
                    {
                      "name": "AZURE_COSMOSDB_CONVERSATIONS_CONTAINER",
                      "value": "[parameters('AZURE_COSMOSDB_CONVERSATIONS_CONTAINER')]"
                    },
                    {
                      "name": "AZURE_COSMOSDB_DATABASE",
                      "value": "[parameters('AZURE_COSMOSDB_DATABASE')]"
                    },
                    {
                      "name": "AZURE_COSMOSDB_ENABLE_FEEDBACK",
                      "value": "[parameters('AZURE_COSMOSDB_ENABLE_FEEDBACK')]"
                    },
                    {
                      "name": "SQLDB_USER_MID",
                      "value": "[parameters('userassignedIdentityClientId')]"
                    },
                    {
                      "name": "AZURE_AI_SEARCH_ENDPOINT",
                      "value": "[parameters('azureSearchServiceEndpoint')]"
                    },
                    {
                      "name": "AZURE_SQL_SYSTEM_PROMPT",
                      "value": "[parameters('sqlSystemPrompt')]"
                    },
                    {
                      "name": "AZURE_CALL_TRANSCRIPT_SYSTEM_PROMPT",
                      "value": "[parameters('callTranscriptSystemPrompt')]"
                    },
                    {
                      "name": "AZURE_OPENAI_STREAM_TEXT_SYSTEM_PROMPT",
                      "value": "[parameters('streamTextSystemPrompt')]"
                    },
                    {
                      "name": "USE_AI_PROJECT_CLIENT",
                      "value": "[parameters('useAIProjectClientFlag')]"
                    },
                    {
                      "name": "AZURE_AI_AGENT_ENDPOINT",
                      "value": "[parameters('aiFoundryProjectEndpoint')]"
                    },
                    {
                      "name": "AZURE_AI_AGENT_MODEL_DEPLOYMENT_NAME",
                      "value": "[parameters('AzureOpenAIModel')]"
                    },
                    {
                      "name": "AZURE_AI_AGENT_API_VERSION",
                      "value": "[parameters('AzureOpenAIApiVersion')]"
                    }
                  ],
                  "linuxFxVersion": "[variables('WebAppImageName')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', parameters('HostingPlanName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiFoundryName'))]",
              "name": "[guid(resourceId('Microsoft.Web/sites', parameters('WebsiteName')), resourceId('Microsoft.CognitiveServices/accounts', parameters('aiFoundryName')), extensionResourceId(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiFoundryName')), 'Microsoft.Authorization/roleDefinitions', '53ca6127-db72-4b80-b1b0-d745d6d5456d'))]",
              "properties": {
                "roleDefinitionId": "[extensionResourceId(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiFoundryName')), 'Microsoft.Authorization/roleDefinitions', '53ca6127-db72-4b80-b1b0-d745d6d5456d')]",
                "principalId": "[reference(resourceId('Microsoft.Web/sites', parameters('WebsiteName')), '2020-06-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('WebsiteName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}/projects/{1}', parameters('aiFoundryName'), parameters('aiFoundryProjectName'))]",
              "name": "[guid(resourceId('Microsoft.Web/sites', parameters('WebsiteName')), resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('aiFoundryName'), parameters('aiFoundryProjectName')), extensionResourceId(resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('aiFoundryName'), parameters('aiFoundryProjectName')), 'Microsoft.Authorization/roleDefinitions', '53ca6127-db72-4b80-b1b0-d745d6d5456d'))]",
              "properties": {
                "roleDefinitionId": "[extensionResourceId(resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('aiFoundryName'), parameters('aiFoundryProjectName')), 'Microsoft.Authorization/roleDefinitions', '53ca6127-db72-4b80-b1b0-d745d6d5456d')]",
                "principalId": "[reference(resourceId('Microsoft.Web/sites', parameters('WebsiteName')), '2020-06-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('WebsiteName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('cosmos-sql-user-role-{0}', parameters('WebsiteName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "accountName": {
                    "value": "[parameters('AZURE_COSMOSDB_ACCOUNT')]"
                  },
                  "roleDefinitionId": {
                    "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', split(format('{0}/00000000-0000-0000-0000-000000000002', parameters('AZURE_COSMOSDB_ACCOUNT')), '/')[0], split(format('{0}/00000000-0000-0000-0000-000000000002', parameters('AZURE_COSMOSDB_ACCOUNT')), '/')[1])]"
                  },
                  "principalId": {
                    "value": "[reference(resourceId('Microsoft.Web/sites', parameters('WebsiteName')), '2020-06-01', 'full').identity.principalId]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "399023243105742355"
                    },
                    "description": "Creates a SQL role assignment under an Azure Cosmos DB account."
                  },
                  "parameters": {
                    "accountName": {
                      "type": "string"
                    },
                    "roleDefinitionId": {
                      "type": "string"
                    },
                    "principalId": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
                      "apiVersion": "2022-05-15",
                      "name": "[format('{0}/{1}', parameters('accountName'), guid(parameters('roleDefinitionId'), parameters('principalId'), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('accountName'))))]",
                      "properties": {
                        "principalId": "[parameters('principalId')]",
                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                        "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('accountName'))]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('WebsiteName'))]"
              ]
            }
          ],
          "outputs": {
            "webAppUrl": {
              "type": "string",
              "value": "[format('https://{0}.azurewebsites.net', parameters('WebsiteName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_cosmos_db')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_sql_db')]"
      ]
    }
  ],
  "outputs": {
    "WEB_APP_URL": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_app_service'), '2022-09-01').outputs.webAppUrl.value]"
    },
    "STORAGE_ACCOUNT_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_storage_account'), '2022-09-01').outputs.storageName.value]"
    },
    "STORAGE_CONTAINER_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_storage_account'), '2022-09-01').outputs.storageContainer.value]"
    },
    "KEY_VAULT_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault'), '2022-09-01').outputs.keyvaultName.value]"
    },
    "COSMOSDB_ACCOUNT_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_cosmos_db'), '2022-09-01').outputs.cosmosAccountName.value]"
    },
    "RESOURCE_GROUP_NAME": {
      "type": "string",
      "value": "[resourceGroup().name]"
    },
    "SQLDB_SERVER": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_sql_db'), '2022-09-01').outputs.sqlServerName.value]"
    },
    "SQLDB_DATABASE": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_sql_db'), '2022-09-01').outputs.sqlDbName.value]"
    },
    "MANAGEDINDENTITY_WEBAPP_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityWebAppOutput.value.name]"
    },
    "MANAGEDINDENTITY_WEBAPP_CLIENTID": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityWebAppOutput.value.clientId]"
    },
    "AI_FOUNDARY_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiFoundryName.value]"
    },
    "AI_SEARCH_SERVICE_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiSearchService.value]"
    }
  }
}